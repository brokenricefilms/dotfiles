#!/usr/bin/env bash

if command -v tmux &>/dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  tmux attach || tmux new-session && exit
fi

export PATH="$HOME/.gem/ruby/2.7.0/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
export PATH="$HOME/gems/bin:$PATH"

export PATH=$PATH:$HOME/dotfiles/bin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/bin

export PATH=$PATH:$HOME/.cargo/bin

export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin

export PATH="$HOME/.npm/bin:$PATH"
export PNPM_HOME="/home/master/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"

export GEM_HOME="$HOME/gems"

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

export VISUAL="nvim"
export EDITOR=$VISUAL
export MANPAGER="nvim +Man!"
export EDITOR="nvim"

export BROWSER="google-chrome-stable"

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d"

HISTCONTROL=ignoreboth
HISTSIZE=
HISTFILESIZE=
shopt -s histappend
shopt -s checkwinsize

bind "set completion-ignore-case on"

set -o vi

stty time 0

alias bat="bat --theme=GitHub"

alias ser="browserSyncStartserver"
alias x="chmod +x"
alias q="exit"
alias ":q"="exit"
alias m="fzfMusic"
alias o="fzfOpen"
alias j="fzfRg"
alias testKeyboardInputCode="sudo showkey"
alias open="xdg-open"
alias lazydocker="sudo $HOME/go/bin/lazydocker"
alias dockerStart="sudo systemctl start docker"
alias docker="sudo docker"
alias docker-compose="sudo docker-compose"
alias googleArtDownload="dezoomify-rs (wl-paste)"
alias kittyListFont="kitty +list-fonts --psnames"
alias createAstro="pnpm create astro@latest"
alias r="trash"
alias clear="clear -x; (tmuxKillAllUnnameSession &)"
alias tmuxKillServer="tmux kill-server"

alias pnpmDev="pnpm dev"
alias pnpmFormat="pnpm format"
alias pnpmBuild="pnpm build"
alias pnpmInstall="pnpm install"
alias pnpmInstallGlobal="pnpm install --global"
alias neofetch="echo 'fuck you'; echo 'use fastfetch'"

alias bluetoothConnectSpeakerPluse4="bluetoothTurnOn ; bluetoothctl connect C1:AC:88:3D:D6:EE"
alias bluetoothDisconnectSpeakerPluse4="bluetoothctl disconnect C1:AC:88:3D:D6:EE"
alias bluetoothRestartSpeakerPluse4="bluetoothDisconnectSpeakerPluse4 ; bluetoothConnectSpeakerPluse4"
alias bluetoothTurnOn="bluetoothctl power on"
alias bluetoothTurnOff="bluetoothctl power off"
alias bluetoothDevices="bluetoothctl devices"

alias mouselessStop="systemctl --user stop mouseless.service"
alias mouselessStart="systemctl --user start mouseless.service"
alias mouselessDebug="mouselessStop mouseless --debug"
alias mouselessReload="mouselessStop; echo 'wait 5s'; sleep 5; mouselessStart"

alias ls="exa --icons"
alias ll="exa --all --long --header --icons --git"
alias l="ll"
alias tree="exa --tree --long"

alias c="fzfChangeDirectory"
alias cc="cd $HOME; fzfChangeDirectory"

alias e="fzfEditFile"
alias e.="nvim ."
alias ee="cd $HOME; fzfEditFile"
alias ej="fzfEmoji"
alias E="fzfSudoEdit"

alias a="git add -A; git commit"
alias aa="git add -A; git commit -m 'auto commit'"
alias am="git add -A; git commit --amend --no-edit"
alias cdr="changeDirectoryTogitRoot"
alias clone="cloneRepoinClipboard"
alias p="git push"
alias pp="git push -f"
alias s="git status -sb"
alias w="fzfGitWorktreeChangeDir"
alias ww="fzfGitWorktreeRemove"
alias aap="aa;p"
alias gitResetHard="git reset --hard"
alias d="git diff --word-diff"

alias ...="cd .. ; cd .. ; ls"
alias ..="cd .. ; ls"
alias doc="cd ~/Documents ; ls"
alias dow="cd ~/Downloads ; ls"
alias tmp="cd /tmp ; ls"

# TODO: make natural language command todo something
function copyFilePath() {
  readlink -f $1 | wl-copy
}

function isGitRepo() {
  git rev-parse HEAD >/dev/null 2>&1
}

function downloadAudio() {
  if [ -z "$1" ]; then
    yt-dlp -f bestaudio --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" "$(wl-paste)"
  else
    yt-dlp -f bestaudio --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" "$1"
  fi
}

function downloadVideo() {
  if [ -z "$1" ]; then
    yt-dlp -o "%(title)s.%(ext)s" "$(wl-paste)"
  else
    yt-dlp -o "%(title)s.%(ext)s" "$1"
  fi
}

function removeJetBrainToolbox() {
  echo "make sure you uninstall all applications installed in Toolbox App"
  echo "Press any key to continue..."
  read -n 1 -r -s

  rm -rf ~/.config/autostart/jetbrains-toolbox.desktop
  killall jetbrains-toolbox
  rm -rf ~/.local/share/JetBrains/Toolbox
  rm -rf ~/.local/share/applications/jetbrains-toolbox.desktop
}

# TODO: checking playlist list to sync change, faster using parallel?, better code with for loop?
function syncMusic() {
  CURRENT_DIR=$(pwd)
  MUSIC_DIR=$HOME/Music/

  cd $MUSIC_DIR
  trash *

  cd $MUSIC_DIR
  mkdir joseph_solomon
  cd joseph_solomon
  downloadAudio "https://l.thuanowa.com/music-joseph-solomon"

  cd $MUSIC_DIR
  mkdir joji
  cd joji
  downloadAudio "https://l.thuanowa.com/music-joji"

  cd $MUSIC_DIR
  mkdir billie_eilish
  cd billie_eilish
  downloadAudio "https://l.thuanowa.com/music-billie-eilish"

  cd $MUSIC_DIR
  mkdir b_ray
  cd b_ray
  downloadAudio "https://l.thuanowa.com/music-b-ray"

  cd $MUSIC_DIR
  mkdir den_vau
  cd den_vau
  downloadAudio "https://l.thuanowa.com/music-den-vau"

  cd $MUSIC_DIR
  mkdir two_feet
  cd two_feet
  downloadAudio "https://l.thuanowa.com/music-two-feet"

  cd $MUSIC_DIR
  mkdir Alec_Benjamin
  cd Alec_Benjamin
  downloadAudio "https://l.thuanowa.com/music-alec-benjamin"

  cd $MUSIC_DIR
  mkdir English
  cd English
  downloadAudio "https://l.thuanowa.com/music-en"

  cd $MUSIC_DIR
  mkdir Vietnamese
  cd Vietnamese
  downloadAudio "https://l.thuanowa.com/music-vi"

  cd $MUSIC_DIR
  mkdir Korean
  cd Korean
  downloadAudio "https://l.thuanowa.com/music-ko"

  cd $MUSIC_DIR
  mkdir Japanese
  cd Japanese
  downloadAudio "https://l.thuanowa.com/music-ja"

  cd $MUSIC_DIR
  mkdir Japanese
  cd Japanese
  downloadAudio "https://l.thuanowa.com/music-ja"

  cd $MUSIC_DIR
  mkdir Spanish
  cd Spanish
  downloadAudio "https://l.thuanowa.com/music-spanish"

  cd $MUSIC_DIR
  mkdir Chinese
  cd Chinese
  downloadAudio "https://l.thuanowa.com/music-chinese"

  cd $MUSIC_DIR
  mkdir chill_hop
  cd chill_hop
  downloadAudio "https://l.thuanowa.com/music-chill-hop"

  cd $CURRENT_DIR
}

function updateBashPlugin() {
  CURRENT_DIR=$(pwd)

  cd ~/dotfiles/bash/
  cat plugin_url.txt | parallel -j8 curl --remote-name

  cd $CURRENT_DIR
}

function updateNvimLazy() {
  CURRENT_DIR=$(pwd)

  cd $HOME/dotfiles/
  nvim --headless "+Lazy! sync" +qa

  cd $CURRENT_DIR
}

function updateFirefoxTheme() {
  CURRENT_DIR=$(pwd)

  THEME_LOCATION=/home/master/.mozilla/firefox/ilkri3vv.default-release/chrome/

  cd $THEME_LOCATION
  git pull

  cd $CURRENT_DIR
}

function giveMePower() {
  echo "( Â¯ ê’³ Â¯)> Give me power"
  sudo echo "( Â¯ ê’³ Â¯)> ðŸ”¥ðŸ”¥ðŸ”¥"
}

function update() {
  giveMePower

  dnf makecache
  sudo dnf update -y

  pnpm add -g pnpm
  pnpm update -g

  tldr --update

  updateFirefoxTheme

  updateBashPlugin

  # updateNvimLazy
}

function browserSyncStartserver() {
  SERVER_IP=$(hostname -I)
  browser-sync start --server --files . --no-notify --host "$SERVER_IP" --port 9000
}

function browserSyncStartserver() {
  SERVER_IP=$(hostname -I)
  browser-sync start --server --files . --no-notify --host "$SERVER_IP" --port 9000
}

function changeDirectoryTogitRoot() {
  cd $(git rev-parse --show-toplevel)
  ls
}

function cloneRepoinClipboard() {
  url_to_username_repo=$(wl-paste | sed 's/.*m\///g')
  repoName=$(wl-paste | sed 's/.*\///g')
  gh repo clone "$url_to_username_repo"
  cd "$repoName"
}

function fzfEmoji() {
  default() {
    emoji-fzf preview --prepend | fzf | awk '{ print $1 }' | tr -d "\n" | wl-copy
  }

  if hash emoji-fzf 2>/dev/null; then
    default
  else
    pip install emoji-fzf
    default
  fi
}

function fzfEditFile() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:501 {}' &)

    if [ -n "$FILE" ]; then
      nvim "$FILE"
    fi
  else
    nvim "$1"
  fi
}

function fzfSudoEdit() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:501 {}' &)

    if [ -n "$FILE" ]; then
      sudoedit "$FILE"
    fi
  else
    sudoedit "$1"
  fi
}

function fzfGitWorktreeChangeDir() {
  isGitRepo || return

  local worktrees
  local worktree
  local query
  local sess_arr
  local retval
  worktrees=$(git worktree list | fzf --exit-0 --print-query)
  retval=$?

  IFS=$'\n' read -rd '' -a sess_arr <<<"$worktrees"

  worktree=$(echo ${sess_arr[1]} | awk '{print $1}')
  query=${sess_arr[0]}

  if [ $retval == 0 ]; then
    if [ "$worktree" == "" ]; then
      worktree=$(echo "$query" | awk '{print $1}')
    fi
    cd "$worktree"
    tmux rename-window "$(git branch --show-current)"
  elif [ $retval == 1 ]; then
    DEFAULT_GIT_FOLDER=$(git worktree list | head --lines 1 | awk '{print $1}')

    mkdir $DEFAULT_GIT_FOLDER/.worktrees

    git worktree add $DEFAULT_GIT_FOLDER/.worktrees/"$query"

    cd $DEFAULT_GIT_FOLDER/.worktrees/"$query"

    git branch "$query"
    git checkout "$query"

    tmux rename-window "$(git branch --show-current)"
  fi
}

function fzfGitWorktreeRemove() {
  isGitRepo || return

  WORKTREE=$(git worktree list | fzf | awk '{print $1}')
  DEFAULT_GIT_FOLDER=$(git worktree list | head --lines 1 | awk '{print $1}')

  git worktree remove $WORKTREE --force &>/dev/null
  cd $DEFAULT_GIT_FOLDER
}

function fzfOpen() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:500 {}' &)

    if [ -n "$FILE" ]; then
      xdg-open "$FILE"
    fi
  else
    xdg-open "$1"
  fi
}

function fzfChangeDirectory() {
  DIR=$1

  fzfDir() {
    DIR=$(fd --hidden --type directory . | fzf --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ",  $2} {print  $1}\' | xargs -r exa --long --all --icons --color=never' &)
    cd "$DIR"
    ls
  }

  if [ -z "$1" ]; then
    if [[ -n $DIR ]]; then
      cd $DIR &>/dev/null
      ERROR=$?

      if [[ ERROR -eq 1 ]]; then
        echo "\"$1\" directory does not exist"
        fzfDir
      fi
    else
      fzfDir
    fi
  else
    mkdir -p "$1"
    cd "$1"
  fi
}

function fzfRg() {
  rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi --color "hl:-1:underline,hl+:-1:underline:reverse" --delimiter : --preview 'bat --theme=GitHub --color=always {1} --highlight-line {2}' --bind 'enter:become($EDITOR {1} +{2})'
}

function fzfTldr() {
  tldr --list | sed "s/'//g" | sed "s/,//g" | sed "s/ /\n/g" | sed "s/]//g" | sed "s/\[//g" | fzf --preview "tldr {1}"
}

function tl() {
  if [ -z "$1" ]; then
    COMMAND=$(fzfTldr &)
    tldr $COMMAND
  else
    tldr "$1"
  fi
}

function fzfMusic() {
  CURRENT_DIR=$(pwd)

  cd ~/Music/

  PLAYLIST=$(fd --type directory . --exclude node_modules --exclude go | fzf --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ",  $2} {print  $1}\' | xargs -r ls' &)

  if [ -n "$PLAYLIST" ]; then
    cd $PLAYLIST
    mpv --loop-playlist --shuffle *
    cd $CURRENT_DIR
  else
    cd $CURRENT_DIR
  fi
}

function reload() {
  source ~/.bashrc

  tmux source ~/.tmux.conf
}

function hi() {
  update
  fastfetch
}

function tmuxKillAllUnnameSession() {
  tmux ls | awk '{print $1}' | grep -o '[0-9]\+' >/tmp/killAllUnnameTmuxSessionOutput.sh
  sed -i 's/^/tmux kill-session -t /' /tmp/killAllUnnameTmuxSessionOutput.sh
  chmod +x /tmp/killAllUnnameTmuxSessionOutput.sh
  /tmp/killAllUnnameTmuxSessionOutput.sh
}

function copyEditorConfigFile() {
  changeDirectoryTogitRoot
  cp ~/dotfiles/template/skeleton.editorconfig .editorconfig
}

function gitCloneAllRemoteBranch() {
  for branch in $(git branch -a | grep remotes | grep -v HEAD | grep -v master); do
    git branch --track ${branch#remotes/origin/} $branch
  done
}

function gitCloneAllRepo() {
  org=$1
  limit=9999

  cd ~/repos/

  repos="$(gh repo list "$org" -L $limit)"

  repoTotal="$(echo "$repos" | wc -l)"
  reposComplete=0

  echo

  echo "$repos" | while read -r repo; do
    repoName="$(echo "$repo" | cut -f1)"
    echo -ne "\r\e[0K[ $reposComplete / $repoTotal ] Cloning $repoName"
    gh repo clone "$repoName" "$repoName" -- -q 2>/dev/null || (
      cd "$repoName"
      gitCloneAllRemoteBranch
    )
    reposComplete=$((reposComplete + 1))
  done

  echo "Finished cloning all repos in $org."
}

function setupFnm() {
  curl -fsSL https://fnm.vercel.app/install | bash
}

function nvimNoLsp() {
  rm -rf ~/.config/nvim
  ln -sf ~/dotfiles/nvim-no-lsp/ ~/.config/nvim
}

function nvimLsp() {
  rm -rf ~/.config/nvim
  ln -sf ~/dotfiles/nvim/ ~/.config/nvim
}

function setupDeno() {
  if hash deno 2>/dev/null; then
    echo "Deno already installed"
  else
    curl -fsSL https://deno.land/x/install/install.sh | sh
  fi
}

function setupPreCommit() {
  pnpm install husky -D

  pnpm pkg set scripts.prepare="husky install"
  pnpm run prepare

  echo "---"
  echo "Example next step:"
  echo 'npx husky add .husky/pre-commit "npm test"'
  echo 'git add .husky/pre-commit'
  echo "---"
}

source ~/dotfiles/bash/fzf-bash-completion.sh
bind -x '"\t": fzf_bash_completion'
source ~/dotfiles/bash/completion.bash
source ~/dotfiles/bash/key-bindings.bash

export PATH="/home/master/.local/share/fnm:$PATH"
eval "$(fnm env)"
eval "$(starship init bash)"
