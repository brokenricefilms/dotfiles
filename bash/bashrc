#!/bin/bash

echo_cat_rainbow() {
  e='\033'
  RESET="${e}[0m"
  BOLD="${e}[1m"
  CYAN="${e}[0;96m"
  RED="${e}[0;91m"
  YELLOW="${e}[0;93m"
  GREEN="${e}[0;92m"

  echo
  echo -en "$RED"'-_-_-_-_-_-_-_'
  echo -e "$RESET"$BOLD',------,'"$RESET"
  echo -en "$YELLOW"'_-_-_-_-_-_-_-'
  echo -e "$RESET"$BOLD'|   /\_/\\'"$RESET"
  echo -en "$GREEN"'-_-_-_-_-_-_-'
  echo -e "$RESET"$BOLD'~|__( ^ .^)'"$RESET"
  echo -en "$CYAN"'-_-_-_-_-_-_-_-'
  echo -e "$RESET"$BOLD'""  ""'"$RESET"
  echo
}

echo_cat_rainbow

eval "$(starship init bash)"

HISTCONTROL=ignoreboth
HISTSIZE=
HISTFILESIZE=
shopt -s histappend
shopt -s checkwinsize

bind 'set completion-ignore-case on'

export PATH="$HOME/.gem/ruby/2.7.0/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
export PATH="$HOME/gems/bin:$PATH"
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/bin
export PATH=$PATH:$HOME/.cargo/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin
export PATH="$HOME/.npm/bin:$PATH"
export PATH="$(yarn global bin):$PATH"
export GEM_HOME="$HOME/gems"
export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"
export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
export VISUAL="nvim"
export EDITOR=$VISUAL
export MANPAGER="nvim +Man!"
export EDITOR="nvim"
export FZF_DEFAULT_COMMAND="fd --type f
\ --follow
\ --exclude .git
\ --exclude undodir
\ --exclude gems
\ --exclude node_modules
\ --exclude go
\ --exclude app
\ --exclude gems"
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d"

set -o vi

stty time 0

[[ $PS1 && -f /usr/share/bash-completion/bash_completion ]] &&
  . /usr/share/bash-completion/bash_completion

source ~/dotfiles/bash/gh_completion.sh

alias reload='source ~/.bashrc ; tmux source-file ~/.tmux.conf'
alias ka='killall'
alias cat='bat'
alias t='trash'
alias q='exit'
alias owa='code .'
alias se='sudoedit'
alias x='chmod +x'

alias ins='sudo dnf install -y'
alias uins='sudo dnf remove -y'
inss() {
  dnf search $1
  flatpak search $1
}

browser_daily() {
  xdg-open "https://facebook.com"
  xdg-open "https://mail.google.com/mail/u/0/#inbox"
  xdg-open "https://mail.google.com/mail/u/1/#inbox"
  xdg-open "https://www.youtube.com/feed/subscriptions"
  xdg-open "https://feeder.co/reader"
}

update_bash_functions() {
  gh completion -s bash >~/dotfiles/bash/gh_completion.sh
}

hi() {
  browser_daily
  nvim -c "PlugUpdate | qa"
  update_bash_functions
  dnf makecache
  neofetch
}

alias ..='cd .. ; l'
alias ...='cd .. ; cd .. ; l'
alias dow='cd ~/Downloads ; l'
alias doc='cd ~/Documents ; l'
alias tmp='cd /tmp'
alias changeDirToUsbFolder='cd /run/media/master/ ; ls'

alias ls='ls -ahl --color=auto'
alias l='ls'
alias sl='ls'
alias ll='ls'
alias la='\ls -ah --color=auto'
alias al='la'

make_dir() {
  if [ ! -n "$1" ]; then
    echo -n "ðŸ‘‰ Enter a directory name"
    read dirName
    mkdir -p $dirName && cd $dirName
  elif [ -d $1 ]; then
    echo -e "ðŸ‘‰ $1 already exists"
    cd $1
  else
    mkdir -p $1 && cd $1
  fi
}
alias mk="make_dir"

SERVER_IP() {
  hostname -I
}

ser() {
  browser-sync start --server --files . --no-notify --host SERVER_IP --port 9000
}

nvm() {
  echo "\nðŸ‘‰ NVM not loaded! Loading now..."
  unset -f nvm
  export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
  [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
  nvm "$@"
}

alias yt="yt-dlp -f bestvideo+bestaudio"

yta() {
  yt-dlp -f "bestaudio" --continue
  \  --no-overwrites
  \  --ignore-errors
  \  --extract-audio
  \  --audio-format mp3 -o "%(title)s.%(ext)s"
}

alias m='mpv --shuffle --loop-playlist ~/Music/*'

update_music() {
  mk ~/Music/music_i_like/
  trash *
  yt-dlp -f "bestaudio" --continue
  \  --no-overwrites
  \  --ignore-errors
  \  --extract-audio
  \  --audio-format mp3 -o "%(title)s.%(ext)s" "https://www.youtube.com/playlist?list=PLcazFfFZIFPld2xu_nAgmbgj5QldQOpUB"
  cd -
}

alias dot='tmux switch-client -t "dotfiles"'
alias in='tmux switch-client -t "inbox"'

kill_all_unname_tmux_session() {
  echo "\nðŸ‘‰ kill all unname tmux session"
  cd /tmp/
  tmux ls | awk '{print $1}' | grep -o '[0-9]\+' >/tmp/killAllUnnameTmuxSessionOutput.sh
  sed -i 's/^/tmux kill-session -t /' killAllUnnameTmuxSessionOutput.sh
  chmod +x killAllUnnameTmuxSessionOutput.sh
  ./killAllUnnameTmuxSessionOutput.sh
  cd -
  tmux ls
}

kill_all_unname_tmux_session_no_message() {
  cd /tmp/
  tmux ls | awk '{print $1}' | grep -o '[0-9]\+' >/tmp/killAllUnnameTmuxSessionOutput.sh
  sed -i 's/^/tmux kill-session -t /' killAllUnnameTmuxSessionOutput.sh
  chmod +x killAllUnnameTmuxSessionOutput.sh
  ./killAllUnnameTmuxSessionOutput.sh
  cd -
}

alias clear='kill_all_unname_tmux_session_no_message ; clear -x'
alias cler='clear'
alias clea='clear'

alias vi="nvim"
alias vim="nvim"

find_file_edit_in_nvim() {
  if [ ! -n "$1" ]; then
    find_file
  else
    nvim "$1"
  fi
}
alias e='find_file_edit_in_nvim'
alias v='find_file_edit_in_nvim'

emoji() {
  if hash emoji-fzf 2>/dev/null; then
    emoji-fzf preview --prepend |
      fzf_down |
      awk '{ print $1 }' | tr -d "\n" | wl-copy
  else
    pip install emoji-fzf
    emoji-fzf preview --prepend |
      fzf_down |
      awk '{ print $1 }' |
      tr -d "\n" |
      wl-copy
  fi
}
alias ej="emoji"

fzf_down() {
  fzf --height 50% --min-height 20 --reverse
}

a() {
  local command
  command=$(\cat ~/.bash_history | fzf_down)
  $command
}

find_file() {
  local file
  file=$(fd . -t f --exclude .git --exclude undodir --exclude gems --exclude node_modules --exclude go --exclude app --exclude gems | fzf_down --preview 'bat --style=numbers --color=always --line-range :500 {}')
  if [ ! -z "$file" ]; then
    nvim "$file"
  fi
}
alias f='find_file'

open_file() {
  local object
  object=$(fd . --exclude .git --exclude undodir --exclude gems --exclude node_modules --exclude go --exclude app --exclude gems | fzf_down --preview 'bat --style=numbers --color=always --line-range :500 {}')
  if [ ! -z "$object" ]; then
    xdg-open "$object"
  fi
}
alias o='open_file'

change_dir() {
  local dir
  dir=$(fd -t d . --exclude .git --exclude undodir --exclude gems --exclude node_modules --exclude go --exclude app --exclude gems | fzf_down --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ",  $2} {print  $1}\' | xargs -r exa -aT --color=always --group-directories-first --icons -L 1')
  cd "$dir"

  ls
}
alias c='change_dir'

alias gl='git log --oneline --decorate --all --graph -n 10'

change_dir_to_git_root() {
  cd $(git rev-parse --show-toplevel)
}
alias cdr='change_dir_to_git_root'

git_status() {
  git status -sb
}
alias st='git_status'

auto_commit() {
  git add .
  git commit -m "[ðŸ‘ŒAuto commit] $(curl -s whatthecommit.com/index.txt)"
}

ok() {
  st
  auto_commit
  push
}

go_to_git_clone_repo_dir() {
  gitDir="$(basename "$1" .git)"
  gitDirResolved=${2:-$gitDir}
  git clone "$@" && cd "$gitDirResolved"
}
alias gc='go_to_git_clone_repo_dir'

yo() {
  git diff
  echo -n "ðŸ‘‰ Commmit message: "
  read "commitMessage"
  git add .
  git commit -m "$commitMessage"
  git push
}

u() {

  if [ -f "$1" ]; then
    case "$1" in
    *.tar.bz2) tar -jxvf "$1" ;;
    *.tar.gz) tar -zxvf "$1" ;;
    *.bz2) bunzip2 "$1" ;;
    *.dmg) hdiutil mount "$1" ;;
    *.gz) gunzip "$1" ;;
    *.tar) tar -xvf "$1" ;;
    *.tar.xz) tar -xvf "$1" ;;
    *.tbz2) tar -jxvf "$1" ;;
    *.tgz) tar -zxvf "$1" ;;
    *.txz) tar -zxvf "$1" ;;
    *.zip) unzip "$1" ;;
    *.ZIP) unzip "$1" ;;
    *.pax) cat "$1" | pax -r ;;
    *.pax.Z) uncompress "$1" --stdout | pax -r ;;
    *.rar) unrar x "$1" ;;
    *.Z) uncompress "$1" ;;
    *.7z) 7z x $1 ;;
    *) echo "'"$1"' cannot be extracted/mounted via extract()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

run() {
  file_name=$1
  file_name_without_extension=$(echo "$file_name" | cut -f 1 -d '.')

  if [ -f $file_name ]; then
    if hash cowsay 2>/dev/null; then
      cowsay "ðŸ‘‹Hey, I will run $file_name for you."
      cowsay "Result"
    else
      echo "ðŸ‘‹Hey, I will run $file_name for you."
      echo "=========="
      echo "==Result=="
      echo "=========="
    fi
    echo ""
    case $file_name in
    *.cpp)
      g++ $file_name
      ./a.out
      rm a.out
      ;;
    *.c)
      gcc $file_name
      ./a.out
      rm a.out
      ;;
    *.html) brave-browser --new-window $file_name ;;
    *.js) node $file_name ;;
    *.ts) deno $file_name ;;
    *.py) python $file_name ;;
    *.go) go run $file_name ;;
    *.cs)
      csc $file_name
      mono "${file_name_without_extension}.exe"
      rm -rf "${file_name_without_extension}.exe"
      ;;
    *.java)
      javac $file_name
      java $file_name_without_extension
      rm -rf "${file_name_without_extension}.class"
      ;;
    *.php) php $file_name ;;
    *.sh)
      chmod +x $file_name
      ./$file_name
      ;;
    *) if hash cowsay 2>/dev/null; then
      cowthink -d "I guess, you don't type right the file name. ðŸ¤£ Try again."
    else
      echo "I guess, you don't type right the file name. ðŸ¤£ Try again."
    fi ;;
    esac
  fi
}
