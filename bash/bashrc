#!/usr/bin/env bash

if command -v tmux &>/dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  tmux attach || tmux new-session && exit
fi

export PATH="$HOME/.gem/ruby/2.7.0/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
export PATH="$HOME/gems/bin:$PATH"

export PATH=$PATH:$HOME/dotfiles/bin
export PATH=$PATH:$HOME/.local/bin
export PATH=$PATH:$HOME/bin

export PATH=$PATH:$HOME/.cargo/bin

export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:$HOME/go/bin

export PATH="$HOME/.npm/bin:$PATH"
export PNPM_HOME="/home/master/.local/share/pnpm"
export PATH="$PNPM_HOME:$PATH"

export GEM_HOME="$HOME/gems"

export RIPGREP_CONFIG_PATH="$HOME/.ripgreprc"

export DENO_INSTALL="$HOME/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"

export VISUAL="nvim"
export EDITOR=$VISUAL
export MANPAGER="nvim +Man!"
export EDITOR="nvim"

export BROWSER="google-chrome-stable"

export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"
export FZF_ALT_C_COMMAND="fd -t d"

export FZF_DEFAULT_OPTS="
	--color=fg:#797593,bg:#faf4ed,hl:#d7827e
	--color=fg+:#575279,bg+:#f2e9e1,hl+:#d7827e
	--color=border:#dfdad9,header:#286983,gutter:#faf4ed
	--color=spinner:#ea9d34,info:#56949f,separator:#dfdad9
	--color=pointer:#907aa9,marker:#b4637a,prompt:#797593"

HISTCONTROL=ignoreboth
HISTSIZE=
HISTFILESIZE=
shopt -s histappend
shopt -s checkwinsize

bind "set completion-ignore-case on"

set -o vi

stty time 0

alias bat="bat --theme=GitHub"
alias ser="browser_sync_start_server"
alias tree="exa --tree --icons"
alias x="chmod +x"
alias q="exit"
alias ":q"="exit"
alias m="fzf_music"
alias o="fzf_open"
alias g="fzf_rg"
alias npm="pnpm"
alias npx="pnpx"
alias c="code"
alias test_keyboard_input_code="sudo libinput debug-events"
alias open="xdg-open"

alias 4l="tmux split-window -d \; split-window -d \; split-window -d \; select-layout even-horizontal"
alias 4-="tmux split-window -d \; split-window -d \; split-window -d \; select-layout even-vertical"
alias 3l="tmux split-window -d \; split-window -d \; select-layout even-horizontal"
alias 3-="tmux split-window -d \; split-window -d \; select-layout even-vertical"

alias 4i="tmux split-window -d \; split-window -d \; split-window -d \; select-layout main-vertical"
alias 3i="tmux split-window -d \; split-window -d \; select-layout main-vertical"

alias r="rm -rf"
alias rr="sudo rm -rf"
alias t="trash"

alias d="fzf_change_directory"
alias dd="cd $HOME; fzf_change_directory"

alias e="fzf_edit_file"
alias ee="cd $HOME; fzf_edit_file"
alias ej="fzf_emoji"
alias E="fzf_sudo_edit"

alias i="yay --noconfirm"
alias u="yay -R --noconfirm"

alias a="git add -A; git commit"
alias aa="git add -A; git commit -m 'auto commit'"
alias am="git add -A; git commit --amend --no-edit"
alias cdr="change_directory_to_git_root"
alias cl="clone_repo_in_clipboard"
alias l="git pull"
alias ll="git pull -f"
alias p="git push"
alias pp="git push -f"
alias s="git status -sb"
alias w="fzf_git_worktree_change_dir"
alias ww="fzf_git_worktree_remove"

alias ...="cd .. ; cd .. ; ls"
alias ..="cd .. ; ls"
alias doc="cd ~/Documents ; ls"
alias dow="cd ~/Downloads ; ls"
alias la="exa --all --icons"
alias ls="exa --long --all --icons"
alias tmp="cd /tmp"

is_in_git_repo() {
  git rev-parse HEAD >/dev/null 2>&1
}

function browser_daily() {
  open "https://www.inoreader.com/all_articles"
  open "https://www.youtube.com/feed/subscriptions"
  open "https://github.com"
}

function download_audio() {
  yt-dlp -f bestaudio --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s" "$1"
}

# TODO: checking playlist list to sync change
function sync_music() {
  CURRENT_DIR=$(pwd)
  MUSIC_DIR=$HOME/Music/

  cd $MUSIC_DIR
  trash *

  mkdir joji
  cd joji
  download_audio "https://l.thuanowa.com/music-joji"

  cd $MUSIC_DIR
  mkdir billie_eilish
  cd billie_eilish
  download_audio "https://l.thuanowa.com/music-billie-eilish"

  cd $MUSIC_DIR
  mkdir b_ray
  cd b_ray
  download_audio "https://l.thuanowa.com/music-b-ray"

  cd $MUSIC_DIR
  mkdir den_vau
  cd den_vau
  download_audio "https://l.thuanowa.com/music-den-vau"

  cd $MUSIC_DIR
  mkdir two_feet
  cd two_feet
  download_audio "https://l.thuanowa.com/music-two-feet"

  cd $MUSIC_DIR
  mkdir English
  cd English
  download_audio "https://l.thuanowa.com/music-en"

  cd $MUSIC_DIR
  mkdir Vietnamese
  cd Vietnamese
  download_audio "https://l.thuanowa.com/music-vi"

  cd $MUSIC_DIR
  mkdir Korean
  cd Korean
  download_audio "https://l.thuanowa.com/music-ko"

  cd $MUSIC_DIR
  mkdir Japanese
  cd Japanese
  download_audio "https://l.thuanowa.com/music-ja"

  cd $MUSIC_DIR
  mkdir chill_hop
  cd chill_hop
  download_audio "https://l.thuanowa.com/music-chill-hop"

  cd $CURRENT_DIR
}

function update() {
  CURRENT_DIR=$(pwd)

  yay
  pnpm add -g pnpm
  pnpm update -g
  tldr --update
  ~/.tmux/plugins/tpm/bin/update_plugins all

  cd ~/dotfiles/bash/
  curl --remote-name https://raw.githubusercontent.com/lincheney/fzf-tab-completion/master/bash/fzf-bash-completion.sh
  git add .
  git commit -m "chore(bash): plugin"

  cd $HOME/dotfiles/
  nvim --headless "+Lazy! sync" +qa
  git add nvim/lazy-lock.json
  git commit -m "chore: lazy.nvim"
  git push

  cd $CURRENT_DIR
}

function browser_sync_start_server() {
  SERVER_IP=$(hostname -I)
  browser-sync start --server --files . --no-notify --host "$SERVER_IP" --port 9000
}

function change_directory_to_git_root() {
  cd $(git rev-parse --show-toplevel)
  ls
}

function clone_repo_in_clipboard() {
  url_to_username_repo=$(wl-paste | sed 's/.*m\///g')
  repo_name=$(wl-paste | sed 's/.*\///g')
  gh repo clone "$url_to_username_repo"
  cd "$repo_name"
}

function fzf_emoji() {
  default() {
    emoji-fzf preview --prepend | fzf | awk '{ print $1 }' | tr -d "\n" | wl-copy
  }

  if hash emoji-fzf 2>/dev/null; then
    default
  else
    pip install emoji-fzf
    default
  fi
}

function fzf_edit_file() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:501 {}')

    if [ -n "$FILE" ]; then
      nvim "$FILE"
    fi
  else
    nvim "$1"
  fi
}

function fzf_sudo_edit() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:501 {}')

    if [ -n "$FILE" ]; then
      sudoedit "$FILE"
    fi
  else
    sudoedit "$1"
  fi
}

function fzf_git_worktree_change_dir() {
  is_in_git_repo || return

  local worktrees
  local worktree
  local query
  local sess_arr
  local retval
  worktrees=$(git worktree list | fzf --exit-0 --print-query --reverse)
  retval=$?

  IFS=$'\n' read -rd '' -a sess_arr <<<"$worktrees"

  worktree=$(echo ${sess_arr[1]} | awk '{print $1}')
  query=${sess_arr[0]}

  if [ $retval == 0 ]; then
    if [ "$worktree" == "" ]; then
      worktree=$(echo "$query" | awk '{print $1}')
    fi
    cd "$worktree"
  elif [ $retval == 1 ]; then
    DEFAULT_GIT_FOLDER=$(git worktree list | head --lines 1 | awk '{print $1}')

    mkdir $DEFAULT_GIT_FOLDER/.worktrees

    git worktree add $DEFAULT_GIT_FOLDER/.worktrees/"$query"

    cd $DEFAULT_GIT_FOLDER/.worktrees/"$query"

    git branch "$query"
    git checkout "$query"
  fi
}

function fzf_git_worktree_remove() {
  is_in_git_repo || return

  WORKTREE=$(git worktree list | fzf | awk '{print $1}')
  DEFAULT_GIT_FOLDER=$(git worktree list | head --lines 1 | awk '{print $1}')

  git worktree remove $WORKTREE --force &>/dev/null
  cd $DEFAULT_GIT_FOLDER
}

function fzf_open() {
  if [ -z "$1" ]; then
    FILE=$(fd --hidden --type file . | fzf --preview 'bat --theme=GitHub --color=always --style=numbers --line-range=:500 {}')

    if [ -n "$FILE" ]; then
      open "$FILE"
    fi
  else
    open "$1"
  fi
}

function fzf_change_directory() {
  if [ -z "$1" ]; then
    DIR=$1

    fzf_dir() {
      DIR=$(fd --hidden --type directory . | fzf --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ",  $2} {print  $1}\' | xargs -r exa --tree --level=2')
      cd "$DIR"
      la
    }

    if [[ -n $DIR ]]; then
      cd $DIR &>/dev/null
      ERROR=$?

      if [[ ERROR -eq 1 ]]; then
        echo "\"$1\" directory does not exist"
        fzf_dir
      fi
    else
      fzf_dir
    fi
  else
    mkdir -p "$1"
    cd "$1"
  fi
}

function fzf_rg() {
  rg --color=always --line-number --no-heading --smart-case "${*:-}" |
    fzf --ansi --color "hl:-1:underline,hl+:-1:underline:reverse" --delimiter : --preview 'bat --theme=GitHub --color=always {1} --highlight-line {2}' --bind 'enter:become($EDITOR {1} +{2})'
}

function fzf_tldr() {
  tldr --list | sed "s/'//g" | sed "s/,//g" | sed "s/ /\n/g" | sed "s/]//g" | sed "s/\[//g" | fzf --preview "tldr {1}"
}

function tl() {
  if [ -z "$1" ]; then
    COMMAND=$(fzf_tldr)
    tldr $COMMAND
  else
    tldr "$1"
  fi
}

function fzf_music() {
  CURRENT_DIR=$(pwd)

  cd ~/Music/

  PLAYLIST=$(fd --type directory . --exclude node_modules --exclude go | fzf --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ",  $2} {print  $1}\' | xargs -r exa --tree --icons')

  if [ -n "$PLAYLIST" ]; then
    cd $PLAYLIST
    mpv --loop-playlist --shuffle *
    cd $CURRENT_DIR
  else
    cd $CURRENT_DIR

  fi
}

function reload() {
  source ~/.bashrc

  tmux source ~/.tmux.conf
}

function reload_touchcursor() {
  cp ~/dotfiles/touchcursor.conf ~/.config/touchcursor/
  systemctl --user restart touchcursor.service
}

function hi() {
  browser_daily
}

tmux_kill_all_unname_session() {
  CURRENT_DIR=$(pwd)
  cd /tmp/
  tmux ls | awk '{print $1}' | grep -o '[0-9]\+' >/tmp/killAllUnnameTmuxSessionOutput.sh
  sed -i 's/^/tmux kill-session -t /' killAllUnnameTmuxSessionOutput.sh
  chmod +x killAllUnnameTmuxSessionOutput.sh
  ./killAllUnnameTmuxSessionOutput.sh
  cd $CURRENT_DIR
}

# TODO: make faster by using api
show_all_video_chapter() {
  yt-dlp --dump-json "$1" | jq '.title, .original_url, .chapters' | nvim
}

copy_editor_config_file() {
  echo "root = true

[*]
indent_style = space
indent_size = 2
charset = utf-8
trim_trailing_whitespace = true
insert_final_newline = true
end_of_line = lf
# editorconfig-tools is unable to ignore longs strings or urls
max_line_length = off

[CHANGELOG.md]
indent_size = false" >.editorconfig
}

create_publish_repo() {
  gh repo create --public --clone "$1"
}

create_thuanowa_public_repo() {
  cd ~/repos/thuanowa/
  create_publish_repo
}

create_public_repo_using_thuanowa_template() {
  gh repo create --template thuanowa/template --public --clone "$1"
}

create_thuanowa_public_repo_using_thuanowa_template() {
  cd ~/repos/thuanowa/
  create_publish_repo_using_thuanowa_template
}

open_thuanowa_github() {
  open "https://github.com/thuanowa"
}

open_garden() {
  open "https://github.com/thuanowa/garden"
}

open_discord_ong_dev_writing_channel() {
  open "https://discord.com/channels/822464808666005504/880734523787190324"
}

open_netlify() {
  open "https://app.netlify.com/teams/thuanowa/overview"
}

switch_audio_output_to_headphone() {
  pactl set-default-sink alsa_output.pci-0000_04_00.6.3.HiFi__hw_Generic_1__sink
}

switch_audio_output_to_bluetooth_speak() {
  pactl set-default-sink bluez_output.C1_AC_88_3D_D6_EE.1
}

switch_audio_input_to_headphone() {
  pactl set-default-source alsa_input.pci-0000_04_00.6.HiFi__hw_Generic_1__source
}

source ~/dotfiles/bash/fzf-bash-completion.sh
bind -x '"\t": fzf_bash_completion'
source /usr/share/fzf/completion.bash
source /usr/share/fzf/key-bindings.bash

eval "$(fnm env --use-on-cd)"
eval "$(starship init bash)"
