if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
    exec tmux
fi

set -U EDITOR nvim
export EDITOR='nvim'
export VISUAL='nvim'
export PATH="$HOME/.npm/bin:$PATH"
export DENO_INSTALL="/home/master/.deno"
export PATH="$DENO_INSTALL/bin:$PATH"
export PATH="$HOME/.gem/ruby/2.7.0/bin:$PATH"
export PATH="$HOME/.local/share/gem/ruby/3.0.0/bin:$PATH"
export PATH="$HOME/gems/bin:$PATH"
export PATH="$PATH:/opt/mssql-tools/bin"
export PATH=$PATH:~/.local/bin
export PATH=$PATH:~/bin
export PATH=$PATH:~/.cargo/bin
export PATH=$PATH:/usr/local/go/bin
export PATH=$PATH:~/go/bin
export GEM_HOME="$HOME/gems"

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' rehash true
zstyle ':completion:*' accept-exact '*(N)'
WORDCHARS=${WORDCHARS//\/[&.;]}

autoload -U colors && colors
eval "$(starship init zsh)"

setopt histignorealldups sharehistory
setopt EXTENDED_HISTORY
setopt HIST_EXPIRE_DUPS_FIRST
setopt HIST_IGNORE_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_IGNORE_SPACE
setopt HIST_FIND_NO_DUPS
setopt HIST_SAVE_NO_DUPS
setopt HIST_BEEP
HISTSIZE=10000
SAVEHIST=10000
HISTFILE=~/.zsh_history

bindkey -v

function zle_keymap_select {
if [[ ${KEYMAP} == vicmd ]] ||
    [[ $1 = 'block' ]]; then
    echo -ne '\e[1 q'
elif [[ ${KEYMAP} == main ]] ||
    [[ ${KEYMAP} == viins ]] ||
    [[ ${KEYMAP} = '' ]] ||
    [[ $1 = 'beam' ]]; then
    echo -ne '\e[5 q'
fi
}

zle -N zle_keymap_select

function zle_line_init() {
    zle -K viins
    echo -ne "\e[5 q"
}

zle -N zle_line_init

echo -ne '\e[5 q'

preexec() { echo -ne '\e[5 q' ;}

autoload -Uz compinit
compinit

function downloadFile () {
    cd ~/Downloads
    aria2c $argv
    ls -lah ~/Downloads
    cd -
}

function cppProject () {
    cp -r ~/.config/nvim/stuff/cpppro/* .
    nvim main.cpp source.cpp header.h input
}

prettierCpp () { clang-format --style=Google -i $(find -name '*.h' && find -name '*.cpp') }

prettierCs () { clang-format --style=Google -i $(find -name '*.cs') }

function repeatIn1s () {
    while true
    do
        $argv
        sleep 1
    done
}

function mk () {
    if [ ! -n "$1" ]; then
        echo "Enter a directory name"
    elif [ -d $1 ]; then
        echo "\`$1' already exists"
        cd $1
    else
        mkdir -p $1 && cd $1
    fi
}
alias makeDir="mk"

SERVER_IP () { hostname -I }

se () { browser-sync start --server --files . --no-notify --host SERVER_IP --port 9000 }

alias l='exa -al --color=always --group-directories-first --icons'
alias ls='l'
alias sl='l'
alias la='exa -a --color=always --group-directories-first --icons'
alias al='exa -a --color=always --group-directories-first --icons'
alias ll='l'
alias l.='exa -a| egrep "^\."'
alias lt='exa -aT --color=always --group-directories-first --icons'

alias cpf='wl-copy'
# alias cpf='xclip -sel clip'
alias reload='source ~/.zshrc ; tmux source-file ~/.tmux.conf'
alias b='btop'
alias :q='exit'
alias q='exit'
alias p='ipython3'
alias ka='killall'
alias 777='chmod -R 777'
alias x='chmod +x'
alias colorPicker='zenity --color-selection'
alias cat='bat'
export GREP_COLOR='1;31'
alias grep='grep --color=auto'
alias dud='du -d 1 -h'
alias updateApplications='sudo ln -sf ~/dotfiles/applications/* /usr/share/applications/'
alias fak='git stash &>/dev/null; git stash clear'

function wifiDriverEnable() {
    sudo sh -c "modprobe mt7921e ; echo 14c3 0608 > /sys/bus/pci/drivers/mt7921e/new_id"
}
alias wf='wifiDriverEnable'

# music stuff
alias m='mpv --shuffle --loop-playlist ~/Music/*'

# ubuntu apt
# alias ins='sudo apt install -y'
# alias inss='apt search'
# alias uins='sudo apt remove -y'

# termux pkg
# alias ins='pkg install -y'
# alias uins='pkg remove -y'

# fedora dnf
# alias ins='sudo dnf -y install'
# alias inss='dnf search'
# alias uins='sudo dnf -y remove'

# arch
alias ins='sudo pacman -S --noconfirm'
alias inss='pacman -Ss'
alias ya='yay --noconfirm'
alias uins='sudo pacman -Rs --noconfirm'

alias ..='cd .. ; l'
alias ...='cd .. ; cd .. ; l'
alias dow='cd ~/Downloads ; l'
alias doc='cd ~/Documents ; l'
alias tmp='cd /tmp ; l'

alias yt='yt-dlp -f bestvideo+bestaudio'
alias yta='yt-dlp -f "bestaudio" --continue --no-overwrites --ignore-errors --extract-audio --audio-format mp3 -o "%(title)s.%(ext)s"'

function syncMusic() {
    cd ~/Music/
    trash *
    yta "https://thuanpham2311.github.io/l/music"
}

alias t='trash'
alias tdl='trash ~/Downloads/*'

function nvm() {
    echo "ðŸš¨ NVM not loaded! Loading now..."
    unset -f nvm
    export NVM_DIR="$([ -z "${XDG_CONFIG_HOME-}" ] && printf %s "${HOME}/.nvm" || printf %s "${XDG_CONFIG_HOME}/nvm")"
    [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
    nvm "$@"
}

function updateDns() {
    sudo curl https://raw.githubusercontent.com/StevenBlack/hosts/master/alternates/fakenews-gambling/hosts --output /etc/hosts
    echo "sometimes if you not lazy try to clear host cache: chrome://net-internals/#dns"
    sudo systemctl restart NetworkManager.service
}

function hi () {
    browserDaily
    topgrade
    neofetch
}

source ~/dotfiles/zsh/functions/gnome.zsh
source ~/dotfiles/zsh/functions/browserConfig.zsh
source ~/dotfiles/zsh/functions/gitConfig.zsh
source ~/dotfiles/zsh/functions/completion.zsh
source ~/dotfiles/zsh/functions/fzfConfig.zsh
source ~/dotfiles/zsh/functions/fzfKeyBindings.zsh
source ~/dotfiles/zsh/functions/tmux.zsh
source ~/dotfiles/zsh/functions/note.zsh
source ~/dotfiles/zsh/functions/zshAutoSuggestions.zsh
source ~/dotfiles/zsh/functions/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh
source ~/dotfiles/zsh/functions/commandStartupShell.zsh
