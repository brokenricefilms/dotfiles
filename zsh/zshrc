if command -v tmux &> /dev/null && [ -n "$PS1" ] && [[ ! "$TERM" =~ screen ]] && [[ ! "$TERM" =~ tmux ]] && [ -z "$TMUX" ]; then
  exec tmux
fi

autoload -U colors && colors

eval "$(starship init zsh)"

zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}'
zstyle ':completion:*' list-colors "${(s.:.)LS_COLORS}"
zstyle ':completion:*' rehash true
zstyle ':completion:*' accept-exact '*(N)'
WORDCHARS=${WORDCHARS//\/[&.;]}

alias reload='source ~/.zshrc ; tmux source-file ~/.tmux.conf'
alias h='htop'
alias q='exit'
alias p='ipython3'
alias ka='killall'
alias 777='chmod -R 777'
alias x='chmod +x'
alias colorPicker='zenity --color-selection'
alias cat='bat'
alias fak='git stash &>/dev/null; git stash clear'
alias t='trash'
alias trash_download='trash ~/Downloads/*'
alias se='sudoedit'
alias show_webcam='mpv av://v4l2:/dev/video0 --profile=low-latency --untimed'
alias create_random_strong_password='</dev/urandom tr -dc '12345!@#$%qwertQWERTasdfgASDFGzxcvbZXCVB' | head -c 28 | copy'

function hi () {
  browserDaily
  update
  neofetch
}

function downloadFile () {
  cd ~/Downloads
  aria2c $argv
  ls -lah ~/Downloads
  cd -
}
alias dl="downloadFile"

function wifiDriverEnable() {
  sudo sh -c "modprobe mt7921e ; echo 14c3 0608 > /sys/bus/pci/drivers/mt7921e/new_id"
}
alias wf='wifiDriverEnable'

if [[ "$XDG_SESSION_TYPE" == "wayland" ]]; then
  alias copy='wl-copy'
else
  alias copy='xclip -sel clip'
fi

alias delete_all_symbolic_links_current_dir='sudo find -type l -delete'

function updateApplications() {
  cd /usr/share/applications/
  sudo find -type l -delete
  cd -
  sudo ln -sf ~/dotfiles/applications/* /usr/share/applications/
}

function nvimSetup() {
  for package in 'dockerfile-language-server-nodejs' 'pyright' 'typescript' 'neovim' 'bash-language-server' 'jsonlint' 'jshint' 'vscode-langservers-extracted' 'cssmodules-language-server' 'emmet-ls' 'vim-language-server'; do
  npm install --install --global "$package"
  done

  yarn global add diagnostic-languageserver

  cargo install stylua
  sudo dnf install -y shfmt rust-analyzer ShellCheck ninja-build libstdc++ libstdc++-static libstdc++-devel dotnet composer
  pip install --upgrade autopep8 cpplint flake8 cmake-language-server
  go install github.com/golangci/golangci-lint/cmd/golangci-lint@v1.50.0
  go install golang.org/x/tools/gopls@latest
  go get github.com/lighttiger2505/sqls

  dotnet tool install --global csharp-ls

  composer global require phan/phan
}

source ~/dotfiles/zsh/functions/dir.zsh

source ~/dotfiles/zsh/functions/gitConfig.zsh
source ~/dotfiles/zsh/functions/fzfConfig.zsh
source ~/dotfiles/zsh/functions/fzfKeyBindings.zsh
source ~/dotfiles/zsh/functions/completion.zsh

source ~/dotfiles/zsh/functions/browserConfig.zsh
source ~/dotfiles/zsh/functions/network.zsh
source ~/dotfiles/zsh/functions/dev.zsh
source ~/dotfiles/zsh/functions/update.zsh
source ~/dotfiles/zsh/functions/history.zsh
source ~/dotfiles/zsh/functions/media.zsh
source ~/dotfiles/zsh/functions/env.zsh
source ~/dotfiles/zsh/functions/tmux.zsh
source ~/dotfiles/zsh/functions/vim.zsh
source ~/dotfiles/zsh/functions/virt.zsh
source ~/dotfiles/zsh/functions/zsh-ssh/zsh-ssh.zsh

source ~/dotfiles/zsh/functions/zshAutoSuggestions.zsh
source ~/dotfiles/zsh/functions/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh

fpath=(~/dotfiles/zsh $fpath)

autoload -Uz compinit
compinit -u
