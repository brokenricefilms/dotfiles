import { BeautifyData } from "./beautifier";
import { Language } from "./language";
export declare class LanguageManager {
    readonly languages: Language[];
    constructor(languages: Language[]);
    getLanguage(data: {
        atomGrammar?: BeautifyData["atomGrammar"];
        fileExtension?: BeautifyData["fileExtension"];
        languageName?: BeautifyData["languageName"];
        sublimeSyntax?: BeautifyData["sublimeSyntax"];
        vscodeLanguage?: BeautifyData["vscodeLanguage"];
    }): Language | null;
    /**
    Find and return the appropriate Languages that match any of the given filter criteria.
    An empty array will be returned if there are no matches.
  
    Precedence:
    - name
    - namespace
    - extension
    - atomGrammar
    - sublimeSyntax
    - vscodeLanguage
    */
    findLanguages(query: LanguageQuery): Language[];
    private getBestMatchLanguage;
    /**
    Get a shallow copy of the languages currently loaded.
    */
    getLoadedLanguages(): Language[];
    /**
    Load a Language
    */
    loadLanguage(language: Language): LanguageManager;
    /**
    Load multiple Languages
    */
    loadLanguages(languages: Language[]): LanguageManager;
}
export interface LanguageQuery {
    /**
    Language name
    */
    name?: string;
    /**
    Language namespace
    */
    namespace?: string;
    /**
    Language extension
    */
    extension?: string;
    /**
    Language Atom grammar
    */
    atomGrammar?: string;
    sublimeSyntax?: string;
    /**
     * VSCode Language ID
     */
    vscodeLanguage?: string;
}
