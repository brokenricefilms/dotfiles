"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const _ = require("lodash");
class OptionsManager {
    constructor(options) {
        this.options = options;
    }
    /**
     * Get a shallow copy of the options currently loaded.
     */
    get loadedOptions() {
        return Object.assign({}, this.options);
    }
    /**
    Load Options
    */
    loadOptions(options) {
        _.merge(this.options, options);
        return this;
    }
}
exports.OptionsManager = OptionsManager;
function optionKeys(beautifier, language) {
    const beautifierOptions = beautifier.options[language.name];
    if (typeof beautifierOptions === "boolean") {
        return [];
    }
    else if (typeof beautifierOptions === "object") {
        const options = [];
        Object.keys(beautifierOptions).forEach(fieldKey => {
            const op = beautifierOptions[fieldKey];
            if (typeof op === "string") {
                options.push(op);
            }
            else if (isOptionTransformSingleFunction(op)) {
                options.push(fieldKey);
            }
            else if (typeof op === "boolean") {
                if (op === true) {
                    options.push(fieldKey);
                }
            }
            else if (isOptionTransform(op)) {
                options.push(...op[0]);
            }
            else {
                return new Error(`Invalid option "${fieldKey}" with value ${JSON.stringify(op)}.`);
            }
        });
        return options;
    }
    else {
        return [];
    }
}
exports.optionKeys = optionKeys;
function isOptionTransformSingleFunction(option) {
    return typeof option === "function";
}
function isOptionTransform(option) {
    return Array.isArray(option);
}
//# sourceMappingURL=OptionsManager.js.map