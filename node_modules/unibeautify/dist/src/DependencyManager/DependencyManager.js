"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
// tslint:disable:no-reserved-keywords
const DependencyFactory_1 = require("./DependencyFactory");
class DependencyManager {
    constructor(beautifierName, dependencyDefinitions = [], options = {}) {
        this.beautifierName = beautifierName;
        this.dependencyDefinitions = dependencyDefinitions;
        this.options = options;
        this.initializeDependencies();
    }
    static clearRegistry() {
        this.registry = {};
    }
    load() {
        return Promise.all(this.dependencyDefinitions
            .map(def => this.get(def.name))
            .map(dep => dep.load())).then(() => true);
    }
    initializeDependencies() {
        const lookup = DependencyManager.registry;
        const beautifierLookup = lookup[this.beautifierName] || {};
        lookup[this.beautifierName] = beautifierLookup;
        this.dependencyDefinitions.forEach(def => {
            const { name: dependencyName } = def;
            const options = this.optionsForDependency(dependencyName);
            const optionsKey = this.keyForOptions(options);
            const depLookup = beautifierLookup[dependencyName] || {};
            beautifierLookup[dependencyName] = depLookup;
            depLookup[optionsKey] =
                depLookup[optionsKey] || this.createDependency(def, options);
        });
    }
    has(name) {
        return Boolean(this.get(name));
    }
    get(dependencyName) {
        const options = this.optionsForDependency(dependencyName);
        const optionsKey = this.keyForOptions(options);
        const lookup = this.registry[dependencyName] || {};
        const dep = lookup[optionsKey];
        if (!dep) {
            throw new Error(`Dependency with name ${dependencyName} not found.`);
        }
        return dep;
    }
    optionsForDependency(dependencyName) {
        return this.options[dependencyName];
    }
    get registry() {
        return DependencyManager.registry[this.beautifierName];
    }
    createDependency(definition, options) {
        return new DependencyFactory_1.DependencyFactory(definition, options).dependency();
    }
    keyForOptions(options = {}) {
        return JSON.stringify(options);
    }
}
DependencyManager.registry = {};
exports.DependencyManager = DependencyManager;
//# sourceMappingURL=DependencyManager.js.map