import { Version } from "./Version";
export declare abstract class Dependency {
    protected definition: DependencyDefinition;
    protected options: DependencyOptions;
    private _isInstalled;
    private _version?;
    private _errors;
    constructor(definition: DependencyDefinition, options: DependencyOptions);
    load(): Promise<boolean>;
    reload(): Promise<boolean>;
    private parseVersion;
    private versionFromText;
    private extractWithPatterns;
    protected abstract loadVersion(): Promise<string>;
    readonly isInstalled: boolean;
    protected addError(error: Error): void;
    private clearErrors;
    readonly name: string;
    readonly required: boolean;
    readonly version: Version | undefined;
    readonly errors: Error[];
}
export interface BaseDependencyDefinition {
    type: DependencyType;
    name: string;
    parseVersion?: DependencyVersionParser;
    optional?: boolean;
    homepageUrl?: string;
    installationUrl?: string;
    bugsUrl?: string;
    badges?: Badge[];
}
export interface Badge {
    description: string;
    /**
     * url for the badge's image URL
     */
    url: string;
    /**
     * href for the link users will follow when clicking the badge and description.
     */
    href: string;
}
export declare enum DependencyType {
    Node = "node",
    Executable = "exec"
}
export declare type DependencyVersionParser = string | RegExp | (string | RegExp)[] | DependencyVersionParserFunction;
export declare type DependencyVersionParserFunction = (text: string) => string | undefined;
export interface NodeDependencyDefinition extends BaseDependencyDefinition {
    type: DependencyType.Node;
    package: string;
}
export interface ExecutableDependencyDefinition extends BaseDependencyDefinition {
    type: DependencyType.Executable;
    program: string;
    versionArgs?: string[];
    docker?: {
        image: string;
    };
}
export declare type DependencyDefinition = NodeDependencyDefinition | ExecutableDependencyDefinition;
export interface DependencyOptions {
    path?: string;
}
