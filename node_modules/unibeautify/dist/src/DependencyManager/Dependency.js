"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const Version_1 = require("./Version");
class Dependency {
    constructor(definition, options) {
        this.definition = definition;
        this.options = options;
        this._isInstalled = false;
        this._errors = [];
    }
    load() {
        if (this.isInstalled) {
            return Promise.resolve(this.isInstalled);
        }
        return this.reload();
    }
    reload() {
        this.clearErrors();
        return this.loadVersion()
            .then(version => {
            this._version = this.parseVersion(version);
            return (this._isInstalled = true);
        })
            .catch((error) => {
            this.addError(error);
            this._version = undefined;
            return (this._isInstalled = false);
        })
            .then(isInstalled => {
            if (this.required && !isInstalled) {
                throw new Error([
                    `Dependency "${this.name}" is required and not installed.`,
                    ...this.errors.map(error => `  - ${error.message}`),
                ].join("\n"));
            }
            return isInstalled;
        });
    }
    parseVersion(text) {
        return new Version_1.Version(this.versionFromText(text) || "");
    }
    versionFromText(text) {
        const { parseVersion } = this.definition;
        if (!parseVersion) {
            return text;
        }
        if (typeof parseVersion === "function") {
            return parseVersion(text);
        }
        const patterns = Array.isArray(parseVersion)
            ? parseVersion
            : [parseVersion];
        return this.extractWithPatterns(text, patterns) || "";
    }
    extractWithPatterns(text, patterns) {
        return patterns.reduce((extracted, pattern) => {
            if (extracted) {
                return extracted;
            }
            const expr = typeof pattern === "string" ? new RegExp(pattern) : pattern;
            const matches = text.match(expr);
            if (matches) {
                return matches[1];
            }
            return undefined;
        }, undefined);
    }
    get isInstalled() {
        return this._isInstalled;
    }
    addError(error) {
        this._errors.push(error);
    }
    clearErrors() {
        this._errors = [];
    }
    get name() {
        return this.definition.name;
    }
    get required() {
        return !Boolean(this.definition.optional);
    }
    get version() {
        return this._version;
    }
    get errors() {
        return this._errors;
    }
}
exports.Dependency = Dependency;
var DependencyType;
(function (DependencyType) {
    DependencyType["Node"] = "node";
    DependencyType["Executable"] = "exec";
})(DependencyType = exports.DependencyType || (exports.DependencyType = {}));
//# sourceMappingURL=Dependency.js.map