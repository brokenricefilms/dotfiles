import { Language } from "./language";
import { LanguageQuery } from "./LanguageManager";
import { OptionsRegistry } from "./options";
import { DependencyDefinition, DependencyManager, Badge } from "./DependencyManager";
/**
New name to rename the option (key) to.
Name of an option to configure for a beautifier.
*/
export declare type BeautifierOptionName = "align_assignments" | "arrow_parens" | "brace_style" | "break_chained_methods" | "comma_first" | "end_of_line" | "end_with_comma" | "end_with_newline" | "end_with_semicolon" | "force_indentation" | "identifier_case" | "indent_chained_methods" | "indent_char" | "indent_comments" | "indent_inner_html" | "indent_level" | "indent_scripts" | "indent_size" | "indent_style" | "indent_with_tabs" | "jslint_happy" | "jsx_brackets" | "keep_array_indentation" | "keyword_case" | "max_preserve_newlines" | "multiline_ternary" | "newline_before_tags" | "newline_between_rules" | "no_leading_zero" | "object_curly_spacing" | "pragma_insert" | "pragma_require" | "preserve_newlines" | "quotes" | "remove_trailing_whitespace" | "selector_separator_newline" | "space_after_anon_function" | "space_before_conditional" | "space_in_empty_paren" | "space_in_paren" | "typesafe_equality_operators" | "unescape_strings" | "unformatted" | "unindent_chained_methods" | "wrap_attributes" | "wrap_attributes_indent_size" | "wrap_line_length" | "wrap_prose";
/**
Function to process the given options and return a final option value.
*/
export declare type BeautifierOptionTransformFunction = (options: OptionValues) => any;
/**
Option that transforms one or more required options into a single value.
*/
export declare type BeautifyOptionTransform = [BeautifierOptionName[], BeautifierOptionTransformFunction];
/**
Option that transforms a single option value with the same name.
*/
export declare type BeautifyOptionTransformSingleFunction = (optionValue: any) => any;
/**
Option for Beautifier given the Language.
*/
export declare type BeautifierLanguageOption = boolean | BeautifierOptionName | BeautifyOptionTransformSingleFunction | BeautifyOptionTransform;
/**

*/
export interface BeautifierLanguageOptionComplex {
    [outOptionName: string]: BeautifierLanguageOption | undefined;
}
/**

true = supports language, enable all options
false = supports language, disable all options
complex = supports language with specific options
*/
export declare type BeautifierLanguageOptions = boolean | BeautifierLanguageOptionComplex;
/**
Options for Beautifier.

Keys are the names of Languages.
*/
export interface BeautifierOptions {
    "_"?: BeautifierLanguageOptions;
    "1C Enterprise"?: BeautifierLanguageOptions;
    "ABAP"?: BeautifierLanguageOptions;
    "ABNF"?: BeautifierLanguageOptions;
    "AGS Script"?: BeautifierLanguageOptions;
    "AMPL"?: BeautifierLanguageOptions;
    "ANTLR"?: BeautifierLanguageOptions;
    "API Blueprint"?: BeautifierLanguageOptions;
    "APL"?: BeautifierLanguageOptions;
    "ASN.1"?: BeautifierLanguageOptions;
    "ASP"?: BeautifierLanguageOptions;
    "ATS"?: BeautifierLanguageOptions;
    "ActionScript"?: BeautifierLanguageOptions;
    "Ada"?: BeautifierLanguageOptions;
    "Adobe Font Metrics"?: BeautifierLanguageOptions;
    "Agda"?: BeautifierLanguageOptions;
    "Alloy"?: BeautifierLanguageOptions;
    "Alpine Abuild"?: BeautifierLanguageOptions;
    "AngelScript"?: BeautifierLanguageOptions;
    "Ant Build System"?: BeautifierLanguageOptions;
    "ApacheConf"?: BeautifierLanguageOptions;
    "Apex"?: BeautifierLanguageOptions;
    "Apollo Guidance Computer"?: BeautifierLanguageOptions;
    "AppleScript"?: BeautifierLanguageOptions;
    "Arc"?: BeautifierLanguageOptions;
    "Arduino"?: BeautifierLanguageOptions;
    "AsciiDoc"?: BeautifierLanguageOptions;
    "AspectJ"?: BeautifierLanguageOptions;
    "Assembly"?: BeautifierLanguageOptions;
    "Augeas"?: BeautifierLanguageOptions;
    "AutoHotkey"?: BeautifierLanguageOptions;
    "AutoIt"?: BeautifierLanguageOptions;
    "Awk"?: BeautifierLanguageOptions;
    "Ballerina"?: BeautifierLanguageOptions;
    "Batchfile"?: BeautifierLanguageOptions;
    "Befunge"?: BeautifierLanguageOptions;
    "Bison"?: BeautifierLanguageOptions;
    "BitBake"?: BeautifierLanguageOptions;
    "Blade"?: BeautifierLanguageOptions;
    "BlitzBasic"?: BeautifierLanguageOptions;
    "BlitzMax"?: BeautifierLanguageOptions;
    "Bluespec"?: BeautifierLanguageOptions;
    "Boo"?: BeautifierLanguageOptions;
    "Brainfuck"?: BeautifierLanguageOptions;
    "Brightscript"?: BeautifierLanguageOptions;
    "Bro"?: BeautifierLanguageOptions;
    "C"?: BeautifierLanguageOptions;
    "C#"?: BeautifierLanguageOptions;
    "C++"?: BeautifierLanguageOptions;
    "C-ObjDump"?: BeautifierLanguageOptions;
    "C2hs Haskell"?: BeautifierLanguageOptions;
    "CLIPS"?: BeautifierLanguageOptions;
    "CMake"?: BeautifierLanguageOptions;
    "COBOL"?: BeautifierLanguageOptions;
    "COLLADA"?: BeautifierLanguageOptions;
    "CSON"?: BeautifierLanguageOptions;
    "CSS"?: BeautifierLanguageOptions;
    "CSV"?: BeautifierLanguageOptions;
    "CWeb"?: BeautifierLanguageOptions;
    "Cap'n Proto"?: BeautifierLanguageOptions;
    "CartoCSS"?: BeautifierLanguageOptions;
    "Ceylon"?: BeautifierLanguageOptions;
    "Chapel"?: BeautifierLanguageOptions;
    "Charity"?: BeautifierLanguageOptions;
    "ChucK"?: BeautifierLanguageOptions;
    "Cirru"?: BeautifierLanguageOptions;
    "Clarion"?: BeautifierLanguageOptions;
    "Clean"?: BeautifierLanguageOptions;
    "Click"?: BeautifierLanguageOptions;
    "Clojure"?: BeautifierLanguageOptions;
    "Closure Templates"?: BeautifierLanguageOptions;
    "CoNLL-U"?: BeautifierLanguageOptions;
    "CoffeeScript"?: BeautifierLanguageOptions;
    "ColdFusion"?: BeautifierLanguageOptions;
    "ColdFusion CFC"?: BeautifierLanguageOptions;
    "Common Lisp"?: BeautifierLanguageOptions;
    "Common Workflow Language"?: BeautifierLanguageOptions;
    "Component Pascal"?: BeautifierLanguageOptions;
    "Cool"?: BeautifierLanguageOptions;
    "Coq"?: BeautifierLanguageOptions;
    "Cpp-ObjDump"?: BeautifierLanguageOptions;
    "Creole"?: BeautifierLanguageOptions;
    "Crystal"?: BeautifierLanguageOptions;
    "Csound"?: BeautifierLanguageOptions;
    "Csound Document"?: BeautifierLanguageOptions;
    "Csound Score"?: BeautifierLanguageOptions;
    "Cuda"?: BeautifierLanguageOptions;
    "Cycript"?: BeautifierLanguageOptions;
    "Cython"?: BeautifierLanguageOptions;
    "D"?: BeautifierLanguageOptions;
    "D-ObjDump"?: BeautifierLanguageOptions;
    "DIGITAL Command Language"?: BeautifierLanguageOptions;
    "DM"?: BeautifierLanguageOptions;
    "DNS Zone"?: BeautifierLanguageOptions;
    "DTrace"?: BeautifierLanguageOptions;
    "Darcs Patch"?: BeautifierLanguageOptions;
    "Dart"?: BeautifierLanguageOptions;
    "DataWeave"?: BeautifierLanguageOptions;
    "Diff"?: BeautifierLanguageOptions;
    "Dockerfile"?: BeautifierLanguageOptions;
    "Dogescript"?: BeautifierLanguageOptions;
    "Dylan"?: BeautifierLanguageOptions;
    "E"?: BeautifierLanguageOptions;
    "EBNF"?: BeautifierLanguageOptions;
    "ECL"?: BeautifierLanguageOptions;
    "ECLiPSe"?: BeautifierLanguageOptions;
    "EJS"?: BeautifierLanguageOptions;
    "EQ"?: BeautifierLanguageOptions;
    "Eagle"?: BeautifierLanguageOptions;
    "Easybuild"?: BeautifierLanguageOptions;
    "Ecere Projects"?: BeautifierLanguageOptions;
    "Edje Data Collection"?: BeautifierLanguageOptions;
    "Eiffel"?: BeautifierLanguageOptions;
    "Elixir"?: BeautifierLanguageOptions;
    "Elm"?: BeautifierLanguageOptions;
    "Emacs Lisp"?: BeautifierLanguageOptions;
    "EmberScript"?: BeautifierLanguageOptions;
    "Erlang"?: BeautifierLanguageOptions;
    "F#"?: BeautifierLanguageOptions;
    "FLUX"?: BeautifierLanguageOptions;
    "Factor"?: BeautifierLanguageOptions;
    "Fancy"?: BeautifierLanguageOptions;
    "Fantom"?: BeautifierLanguageOptions;
    "Filebench WML"?: BeautifierLanguageOptions;
    "Filterscript"?: BeautifierLanguageOptions;
    "Formatted"?: BeautifierLanguageOptions;
    "Forth"?: BeautifierLanguageOptions;
    "Fortran"?: BeautifierLanguageOptions;
    "FreeMarker"?: BeautifierLanguageOptions;
    "Frege"?: BeautifierLanguageOptions;
    "G-code"?: BeautifierLanguageOptions;
    "GAMS"?: BeautifierLanguageOptions;
    "GAP"?: BeautifierLanguageOptions;
    "GCC Machine Description"?: BeautifierLanguageOptions;
    "GDB"?: BeautifierLanguageOptions;
    "GDScript"?: BeautifierLanguageOptions;
    "GLSL"?: BeautifierLanguageOptions;
    "GN"?: BeautifierLanguageOptions;
    "Game Maker Language"?: BeautifierLanguageOptions;
    "Genie"?: BeautifierLanguageOptions;
    "Genshi"?: BeautifierLanguageOptions;
    "Gentoo Ebuild"?: BeautifierLanguageOptions;
    "Gentoo Eclass"?: BeautifierLanguageOptions;
    "Gerber Image"?: BeautifierLanguageOptions;
    "Gettext Catalog"?: BeautifierLanguageOptions;
    "Gherkin"?: BeautifierLanguageOptions;
    "Glyph"?: BeautifierLanguageOptions;
    "Gnuplot"?: BeautifierLanguageOptions;
    "Go"?: BeautifierLanguageOptions;
    "Golo"?: BeautifierLanguageOptions;
    "Gosu"?: BeautifierLanguageOptions;
    "Grace"?: BeautifierLanguageOptions;
    "Gradle"?: BeautifierLanguageOptions;
    "Grammatical Framework"?: BeautifierLanguageOptions;
    "Graph Modeling Language"?: BeautifierLanguageOptions;
    "GraphQL"?: BeautifierLanguageOptions;
    "Graphviz (DOT)"?: BeautifierLanguageOptions;
    "Groovy"?: BeautifierLanguageOptions;
    "Groovy Server Pages"?: BeautifierLanguageOptions;
    "HCL"?: BeautifierLanguageOptions;
    "HLSL"?: BeautifierLanguageOptions;
    "HTML"?: BeautifierLanguageOptions;
    "HTML+Django"?: BeautifierLanguageOptions;
    "HTML+ECR"?: BeautifierLanguageOptions;
    "HTML+EEX"?: BeautifierLanguageOptions;
    "HTML+ERB"?: BeautifierLanguageOptions;
    "HTML+PHP"?: BeautifierLanguageOptions;
    "HTTP"?: BeautifierLanguageOptions;
    "Hack"?: BeautifierLanguageOptions;
    "Haml"?: BeautifierLanguageOptions;
    "Handlebars"?: BeautifierLanguageOptions;
    "Harbour"?: BeautifierLanguageOptions;
    "Haskell"?: BeautifierLanguageOptions;
    "Haxe"?: BeautifierLanguageOptions;
    "Hy"?: BeautifierLanguageOptions;
    "HyPhy"?: BeautifierLanguageOptions;
    "IDL"?: BeautifierLanguageOptions;
    "IGOR Pro"?: BeautifierLanguageOptions;
    "INI"?: BeautifierLanguageOptions;
    "IRC log"?: BeautifierLanguageOptions;
    "Idris"?: BeautifierLanguageOptions;
    "Inform 7"?: BeautifierLanguageOptions;
    "Inno Setup"?: BeautifierLanguageOptions;
    "Io"?: BeautifierLanguageOptions;
    "Ioke"?: BeautifierLanguageOptions;
    "Isabelle"?: BeautifierLanguageOptions;
    "Isabelle ROOT"?: BeautifierLanguageOptions;
    "J"?: BeautifierLanguageOptions;
    "JFlex"?: BeautifierLanguageOptions;
    "JSON"?: BeautifierLanguageOptions;
    "JSON5"?: BeautifierLanguageOptions;
    "JSONLD"?: BeautifierLanguageOptions;
    "JSONiq"?: BeautifierLanguageOptions;
    "JSX"?: BeautifierLanguageOptions;
    "Jasmin"?: BeautifierLanguageOptions;
    "Java"?: BeautifierLanguageOptions;
    "Java Server Pages"?: BeautifierLanguageOptions;
    "JavaScript"?: BeautifierLanguageOptions;
    "Jison"?: BeautifierLanguageOptions;
    "Jison Lex"?: BeautifierLanguageOptions;
    "Jolie"?: BeautifierLanguageOptions;
    "Julia"?: BeautifierLanguageOptions;
    "Jupyter Notebook"?: BeautifierLanguageOptions;
    "KRL"?: BeautifierLanguageOptions;
    "KiCad Layout"?: BeautifierLanguageOptions;
    "KiCad Legacy Layout"?: BeautifierLanguageOptions;
    "KiCad Schematic"?: BeautifierLanguageOptions;
    "Kit"?: BeautifierLanguageOptions;
    "Kotlin"?: BeautifierLanguageOptions;
    "LFE"?: BeautifierLanguageOptions;
    "LLVM"?: BeautifierLanguageOptions;
    "LOLCODE"?: BeautifierLanguageOptions;
    "LSL"?: BeautifierLanguageOptions;
    "LabVIEW"?: BeautifierLanguageOptions;
    "Lasso"?: BeautifierLanguageOptions;
    "Latte"?: BeautifierLanguageOptions;
    "Lean"?: BeautifierLanguageOptions;
    "Less"?: BeautifierLanguageOptions;
    "Lex"?: BeautifierLanguageOptions;
    "LilyPond"?: BeautifierLanguageOptions;
    "Limbo"?: BeautifierLanguageOptions;
    "Linker Script"?: BeautifierLanguageOptions;
    "Linux Kernel Module"?: BeautifierLanguageOptions;
    "Liquid"?: BeautifierLanguageOptions;
    "Literate Agda"?: BeautifierLanguageOptions;
    "Literate CoffeeScript"?: BeautifierLanguageOptions;
    "Literate Haskell"?: BeautifierLanguageOptions;
    "LiveScript"?: BeautifierLanguageOptions;
    "Logos"?: BeautifierLanguageOptions;
    "Logtalk"?: BeautifierLanguageOptions;
    "LookML"?: BeautifierLanguageOptions;
    "LoomScript"?: BeautifierLanguageOptions;
    "Lua"?: BeautifierLanguageOptions;
    "M"?: BeautifierLanguageOptions;
    "M4"?: BeautifierLanguageOptions;
    "M4Sugar"?: BeautifierLanguageOptions;
    "MAXScript"?: BeautifierLanguageOptions;
    "MQL4"?: BeautifierLanguageOptions;
    "MQL5"?: BeautifierLanguageOptions;
    "MTML"?: BeautifierLanguageOptions;
    "MUF"?: BeautifierLanguageOptions;
    "Makefile"?: BeautifierLanguageOptions;
    "Mako"?: BeautifierLanguageOptions;
    "Markdown"?: BeautifierLanguageOptions;
    "Marko"?: BeautifierLanguageOptions;
    "Mask"?: BeautifierLanguageOptions;
    "Mathematica"?: BeautifierLanguageOptions;
    "Matlab"?: BeautifierLanguageOptions;
    "Maven POM"?: BeautifierLanguageOptions;
    "Max"?: BeautifierLanguageOptions;
    "MediaWiki"?: BeautifierLanguageOptions;
    "Mercury"?: BeautifierLanguageOptions;
    "Meson"?: BeautifierLanguageOptions;
    "Metal"?: BeautifierLanguageOptions;
    "MiniD"?: BeautifierLanguageOptions;
    "Mirah"?: BeautifierLanguageOptions;
    "Modelica"?: BeautifierLanguageOptions;
    "Modula-2"?: BeautifierLanguageOptions;
    "Module Management System"?: BeautifierLanguageOptions;
    "Monkey"?: BeautifierLanguageOptions;
    "Moocode"?: BeautifierLanguageOptions;
    "MoonScript"?: BeautifierLanguageOptions;
    "Mustache"?: BeautifierLanguageOptions;
    "Myghty"?: BeautifierLanguageOptions;
    "NCL"?: BeautifierLanguageOptions;
    "NL"?: BeautifierLanguageOptions;
    "NSIS"?: BeautifierLanguageOptions;
    "Nearley"?: BeautifierLanguageOptions;
    "Nemerle"?: BeautifierLanguageOptions;
    "NetLinx"?: BeautifierLanguageOptions;
    "NetLinx+ERB"?: BeautifierLanguageOptions;
    "NetLogo"?: BeautifierLanguageOptions;
    "NewLisp"?: BeautifierLanguageOptions;
    "Nextflow"?: BeautifierLanguageOptions;
    "Nginx"?: BeautifierLanguageOptions;
    "Nim"?: BeautifierLanguageOptions;
    "Ninja"?: BeautifierLanguageOptions;
    "Nit"?: BeautifierLanguageOptions;
    "Nix"?: BeautifierLanguageOptions;
    "Nu"?: BeautifierLanguageOptions;
    "NumPy"?: BeautifierLanguageOptions;
    "OCaml"?: BeautifierLanguageOptions;
    "ObjDump"?: BeautifierLanguageOptions;
    "Objective-C"?: BeautifierLanguageOptions;
    "Objective-C++"?: BeautifierLanguageOptions;
    "Objective-J"?: BeautifierLanguageOptions;
    "Omgrofl"?: BeautifierLanguageOptions;
    "Opa"?: BeautifierLanguageOptions;
    "Opal"?: BeautifierLanguageOptions;
    "OpenCL"?: BeautifierLanguageOptions;
    "OpenEdge ABL"?: BeautifierLanguageOptions;
    "OpenRC runscript"?: BeautifierLanguageOptions;
    "OpenSCAD"?: BeautifierLanguageOptions;
    "OpenType Feature File"?: BeautifierLanguageOptions;
    "Org"?: BeautifierLanguageOptions;
    "Ox"?: BeautifierLanguageOptions;
    "Oxygene"?: BeautifierLanguageOptions;
    "Oz"?: BeautifierLanguageOptions;
    "P4"?: BeautifierLanguageOptions;
    "PAWN"?: BeautifierLanguageOptions;
    "PHP"?: BeautifierLanguageOptions;
    "PLSQL"?: BeautifierLanguageOptions;
    "PLpgSQL"?: BeautifierLanguageOptions;
    "POV-Ray SDL"?: BeautifierLanguageOptions;
    "Pan"?: BeautifierLanguageOptions;
    "Papyrus"?: BeautifierLanguageOptions;
    "Parrot"?: BeautifierLanguageOptions;
    "Parrot Assembly"?: BeautifierLanguageOptions;
    "Parrot Internal Representation"?: BeautifierLanguageOptions;
    "Pascal"?: BeautifierLanguageOptions;
    "Pep8"?: BeautifierLanguageOptions;
    "Perl"?: BeautifierLanguageOptions;
    "Perl 6"?: BeautifierLanguageOptions;
    "Pic"?: BeautifierLanguageOptions;
    "Pickle"?: BeautifierLanguageOptions;
    "PicoLisp"?: BeautifierLanguageOptions;
    "PigLatin"?: BeautifierLanguageOptions;
    "Pike"?: BeautifierLanguageOptions;
    "Pod"?: BeautifierLanguageOptions;
    "PogoScript"?: BeautifierLanguageOptions;
    "Pony"?: BeautifierLanguageOptions;
    "PostCSS"?: BeautifierLanguageOptions;
    "PostScript"?: BeautifierLanguageOptions;
    "PowerBuilder"?: BeautifierLanguageOptions;
    "PowerShell"?: BeautifierLanguageOptions;
    "Processing"?: BeautifierLanguageOptions;
    "Prolog"?: BeautifierLanguageOptions;
    "Propeller Spin"?: BeautifierLanguageOptions;
    "Protocol Buffer"?: BeautifierLanguageOptions;
    "Public Key"?: BeautifierLanguageOptions;
    "Pug"?: BeautifierLanguageOptions;
    "Puppet"?: BeautifierLanguageOptions;
    "Pure Data"?: BeautifierLanguageOptions;
    "PureBasic"?: BeautifierLanguageOptions;
    "PureScript"?: BeautifierLanguageOptions;
    "Python"?: BeautifierLanguageOptions;
    "Python console"?: BeautifierLanguageOptions;
    "Python traceback"?: BeautifierLanguageOptions;
    "QML"?: BeautifierLanguageOptions;
    "QMake"?: BeautifierLanguageOptions;
    "R"?: BeautifierLanguageOptions;
    "RAML"?: BeautifierLanguageOptions;
    "RDoc"?: BeautifierLanguageOptions;
    "REALbasic"?: BeautifierLanguageOptions;
    "REXX"?: BeautifierLanguageOptions;
    "RHTML"?: BeautifierLanguageOptions;
    "RMarkdown"?: BeautifierLanguageOptions;
    "RPC"?: BeautifierLanguageOptions;
    "RPM Spec"?: BeautifierLanguageOptions;
    "RUNOFF"?: BeautifierLanguageOptions;
    "Racket"?: BeautifierLanguageOptions;
    "Ragel"?: BeautifierLanguageOptions;
    "Rascal"?: BeautifierLanguageOptions;
    "Raw token data"?: BeautifierLanguageOptions;
    "Reason"?: BeautifierLanguageOptions;
    "Rebol"?: BeautifierLanguageOptions;
    "Red"?: BeautifierLanguageOptions;
    "Redcode"?: BeautifierLanguageOptions;
    "Regular Expression"?: BeautifierLanguageOptions;
    "Ren'Py"?: BeautifierLanguageOptions;
    "RenderScript"?: BeautifierLanguageOptions;
    "Ring"?: BeautifierLanguageOptions;
    "Riot"?: BeautifierLanguageOptions;
    "RobotFramework"?: BeautifierLanguageOptions;
    "Roff"?: BeautifierLanguageOptions;
    "Rouge"?: BeautifierLanguageOptions;
    "Ruby"?: BeautifierLanguageOptions;
    "Rust"?: BeautifierLanguageOptions;
    "SAS"?: BeautifierLanguageOptions;
    "SCSS"?: BeautifierLanguageOptions;
    "SMT"?: BeautifierLanguageOptions;
    "SPARQL"?: BeautifierLanguageOptions;
    "SQF"?: BeautifierLanguageOptions;
    "SQL"?: BeautifierLanguageOptions;
    "SQLPL"?: BeautifierLanguageOptions;
    "SRecode Template"?: BeautifierLanguageOptions;
    "STON"?: BeautifierLanguageOptions;
    "SVG"?: BeautifierLanguageOptions;
    "Sage"?: BeautifierLanguageOptions;
    "SaltStack"?: BeautifierLanguageOptions;
    "Sass"?: BeautifierLanguageOptions;
    "Scala"?: BeautifierLanguageOptions;
    "Scaml"?: BeautifierLanguageOptions;
    "Scheme"?: BeautifierLanguageOptions;
    "Scilab"?: BeautifierLanguageOptions;
    "Self"?: BeautifierLanguageOptions;
    "ShaderLab"?: BeautifierLanguageOptions;
    "Shell"?: BeautifierLanguageOptions;
    "ShellSession"?: BeautifierLanguageOptions;
    "Shen"?: BeautifierLanguageOptions;
    "Slash"?: BeautifierLanguageOptions;
    "Slim"?: BeautifierLanguageOptions;
    "Smali"?: BeautifierLanguageOptions;
    "Smalltalk"?: BeautifierLanguageOptions;
    "Smarty"?: BeautifierLanguageOptions;
    "Solidity"?: BeautifierLanguageOptions;
    "SourcePawn"?: BeautifierLanguageOptions;
    "Spacebars"?: BeautifierLanguageOptions;
    "Spline Font Database"?: BeautifierLanguageOptions;
    "Squirrel"?: BeautifierLanguageOptions;
    "Stan"?: BeautifierLanguageOptions;
    "Standard ML"?: BeautifierLanguageOptions;
    "Stata"?: BeautifierLanguageOptions;
    "Stylus"?: BeautifierLanguageOptions;
    "SubRip Text"?: BeautifierLanguageOptions;
    "Sublime Text Config"?: BeautifierLanguageOptions;
    "SugarSS"?: BeautifierLanguageOptions;
    "SuperCollider"?: BeautifierLanguageOptions;
    "Swift"?: BeautifierLanguageOptions;
    "Swig"?: BeautifierLanguageOptions;
    "SystemVerilog"?: BeautifierLanguageOptions;
    "TI Program"?: BeautifierLanguageOptions;
    "TLA"?: BeautifierLanguageOptions;
    "TOML"?: BeautifierLanguageOptions;
    "TXL"?: BeautifierLanguageOptions;
    "Tcl"?: BeautifierLanguageOptions;
    "Tcsh"?: BeautifierLanguageOptions;
    "TeX"?: BeautifierLanguageOptions;
    "Tea"?: BeautifierLanguageOptions;
    "Terra"?: BeautifierLanguageOptions;
    "Text"?: BeautifierLanguageOptions;
    "Textile"?: BeautifierLanguageOptions;
    "Thrift"?: BeautifierLanguageOptions;
    "Titanium Style Sheets"?: BeautifierLanguageOptions;
    "Turing"?: BeautifierLanguageOptions;
    "Turtle"?: BeautifierLanguageOptions;
    "Twig"?: BeautifierLanguageOptions;
    "Type Language"?: BeautifierLanguageOptions;
    "TypeScript"?: BeautifierLanguageOptions;
    "Unified Parallel C"?: BeautifierLanguageOptions;
    "Unity3D Asset"?: BeautifierLanguageOptions;
    "Unix Assembly"?: BeautifierLanguageOptions;
    "Uno"?: BeautifierLanguageOptions;
    "UnrealScript"?: BeautifierLanguageOptions;
    "UrWeb"?: BeautifierLanguageOptions;
    "VCL"?: BeautifierLanguageOptions;
    "VHDL"?: BeautifierLanguageOptions;
    "Vala"?: BeautifierLanguageOptions;
    "Verilog"?: BeautifierLanguageOptions;
    "Vim script"?: BeautifierLanguageOptions;
    "Visual Basic"?: BeautifierLanguageOptions;
    "Visualforce"?: BeautifierLanguageOptions;
    "Volt"?: BeautifierLanguageOptions;
    "Vue"?: BeautifierLanguageOptions;
    "Wavefront Material"?: BeautifierLanguageOptions;
    "Wavefront Object"?: BeautifierLanguageOptions;
    "Web Ontology Language"?: BeautifierLanguageOptions;
    "WebAssembly"?: BeautifierLanguageOptions;
    "WebIDL"?: BeautifierLanguageOptions;
    "World of Warcraft Addon Data"?: BeautifierLanguageOptions;
    "X10"?: BeautifierLanguageOptions;
    "XC"?: BeautifierLanguageOptions;
    "XCompose"?: BeautifierLanguageOptions;
    "XML"?: BeautifierLanguageOptions;
    "XPM"?: BeautifierLanguageOptions;
    "XPages"?: BeautifierLanguageOptions;
    "XProc"?: BeautifierLanguageOptions;
    "XQuery"?: BeautifierLanguageOptions;
    "XS"?: BeautifierLanguageOptions;
    "XSLT"?: BeautifierLanguageOptions;
    "XTemplate"?: BeautifierLanguageOptions;
    "Xojo"?: BeautifierLanguageOptions;
    "Xtend"?: BeautifierLanguageOptions;
    "YAML"?: BeautifierLanguageOptions;
    "YANG"?: BeautifierLanguageOptions;
    "YARA"?: BeautifierLanguageOptions;
    "Yacc"?: BeautifierLanguageOptions;
    "Zephir"?: BeautifierLanguageOptions;
    "Zimpl"?: BeautifierLanguageOptions;
    "desktop"?: BeautifierLanguageOptions;
    "eC"?: BeautifierLanguageOptions;
    "edn"?: BeautifierLanguageOptions;
    "fish"?: BeautifierLanguageOptions;
    "mupad"?: BeautifierLanguageOptions;
    "nesC"?: BeautifierLanguageOptions;
    "ooc"?: BeautifierLanguageOptions;
    "reStructuredText"?: BeautifierLanguageOptions;
    "wdl"?: BeautifierLanguageOptions;
    "wisp"?: BeautifierLanguageOptions;
    "xBase"?: BeautifierLanguageOptions;
}
/**
Data given to Beautifier's Beautify function.
*/
export interface BeautifierBeautifyData {
    /**
    Text to beautify
    */
    text: string;
    /**
    Language of text.
    */
    language: Language;
    /**
    Option values for given Language.
    */
    options: {
        [outOptionName: string]: any;
    };
    /**
    File path.
    */
    filePath?: string;
    /**
    Project directory path.
    */
    projectPath?: string;
    /**
     * Dependencies
     */
    dependencies: DependencyManager;
    /**
     * Beautifier-specific configuration
     */
    beautifierConfig?: ResolvedConfig;
}
export interface LanguageOptionValues {
    [languageName: string]: OptionValues;
}
export interface OptionValues {
    "align_assignments"?: boolean;
    "arrow_parens"?: string;
    "brace_style"?: string;
    "break_chained_methods"?: boolean;
    "comma_first"?: boolean;
    "end_of_line"?: string;
    "end_with_comma"?: boolean;
    "end_with_newline"?: boolean;
    "end_with_semicolon"?: boolean;
    "force_indentation"?: boolean;
    "identifier_case"?: string;
    "indent_chained_methods"?: boolean;
    "indent_char"?: string;
    "indent_comments"?: boolean;
    "indent_inner_html"?: boolean;
    "indent_level"?: number;
    "indent_scripts"?: string;
    "indent_size"?: number;
    "indent_style"?: string;
    "indent_with_tabs"?: boolean;
    "jslint_happy"?: boolean;
    "jsx_brackets"?: boolean;
    "keep_array_indentation"?: boolean;
    "keyword_case"?: string;
    "max_preserve_newlines"?: number;
    "multiline_ternary"?: string;
    "newline_before_tags"?: any[];
    "newline_between_rules"?: boolean;
    "no_leading_zero"?: boolean;
    "object_curly_spacing"?: boolean;
    "pragma_insert"?: boolean;
    "pragma_require"?: boolean;
    "preserve_newlines"?: boolean;
    "quotes"?: string;
    "remove_trailing_whitespace"?: boolean;
    "selector_separator_newline"?: boolean;
    "space_after_anon_function"?: boolean;
    "space_before_conditional"?: boolean;
    "space_in_empty_paren"?: boolean;
    "space_in_paren"?: boolean;
    "typesafe_equality_operators"?: boolean;
    "unescape_strings"?: boolean;
    "unformatted"?: any[];
    "unindent_chained_methods"?: boolean;
    "wrap_attributes"?: string;
    "wrap_attributes_indent_size"?: number;
    "wrap_line_length"?: number;
    "wrap_prose"?: string;
}
/**
Data given to Unibeautify to perform beautification with.
*/
export interface BeautifyData {
    /**
    Text to beautify.
    */
    text: string;
    /**
    Name of language to use for beautification.
    */
    languageName?: string;
    /**
    File extension.
    */
    fileExtension?: string;
    /**
    Atom editor grammar.
    */
    atomGrammar?: string;
    /**
    Sublime Text editor syntax.
    */
    sublimeSyntax?: string;
    /**
     * VSCode Document Selector
     */
    vscodeLanguage?: string;
    /**
    File path.
    */
    filePath?: string;
    /**
    Project path.
    */
    projectPath?: string;
    /**
    Option values.
    */
    options: LanguageOptionValues;
}
export declare type BeautifierName = string;
/**
Beautifier
*/
export interface Beautifier {
    /**
    Unique identifying name of the beautifier.
    */
    name: BeautifierName;
    /**
    Supports options of the beautifier.
    */
    options: BeautifierOptions;
    /**
     * Parsed Package.json file as JSON.
     */
    package?: object;
    /**
     * Runtime dependencies of the beautifier.
     */
    dependencies?: DependencyDefinition[];
    /**
     * Function to retrieve beautifier-specific configuration file and/or parsed value.
     */
    resolveConfig?(resolveConfigData: ResolveConfigData): Promise<ResolvedConfig>;
    /**
    Beautify the given code with the beautifier.
    */
    beautify(data: BeautifierBeautifyData): Promise<string>;
    /**
     * Badges to display in automatically generated documentation.
     */
    badges?: Badge[];
}
export interface ResolveConfigData {
    dependencies: DependencyManager;
    filePath?: string;
    projectPath?: string;
}
export interface ResolvedConfig {
    /**
     * The parsed configuration object
     */
    config?: any;
    /**
     * The path to the config file that was found
     */
    filePath?: string;
}
/**
Beautifier
*/
export declare class Unibeautify {
    private options;
    private languages;
    private beautifiers;
    private languageManager;
    private optionsManager;
    /**
     * Get loaded languages which have a loaded beautifier supporting the given option
     */
    getLanguagesSupportingOption(optionName: BeautifierOptionName): Language[];
    /**
     * Get options supported for language and all loaded beautifiers
     */
    getOptionsSupportedForLanguage(language: Language): OptionsRegistry;
    /**
     * Get options supported by beautifier for a language.
     */
    getOptionsSupportedByBeautifierForLanguage({ beautifier, language, }: {
        beautifier: Beautifier;
        language: Language;
    }): OptionsRegistry;
    /**
     * Get all loaded languages which have at least one supporting beautifier.
     */
    readonly supportedLanguages: Language[];
    /**
    Beautify code
    */
    beautify(data: BeautifyData): Promise<string>;
    private beautifiersForLanguageAndOptions;
    private beautifiersWithNames;
    private beautifyWithBeautifiers;
    private handleInlineFlags;
    /**
     * @deprecated use LanguageManager
     */
    findLanguages(query: LanguageQuery): Language[];
    /**
     * @deprecated use LanguageManager
     */
    getLoadedLanguages(): Language[];
    /**
     * Get first loaded beautifier for given language.
     */
    private getBeautifierForLanguage;
    /**
     * Find and return the appropriate Beautifiers for the given Language.
     */
    getBeautifiersForLanguage(language: Language): Beautifier[];
    private doesBeautifierSupportLanguage;
    /**
     * Get loaded beautifiers which have a loaded languages supporting the given option
     */
    getBeautifiersSupportingOption(optionName: BeautifierOptionName): Beautifier[];
    /**
     * Determine whether beautifier supports option for a language
     */
    doesBeautifierSupportOptionForLanguage({ beautifier, language, optionName, }: {
        beautifier: Beautifier;
        language: Language;
        optionName: BeautifierOptionName;
    }): boolean;
    /**
     * Find loaded languages the given beautifier supports.
     */
    getLanguagesForBeautifier(beautifier: Beautifier): Language[];
    /**
     * Get a shallow copy of the options currently loaded.
     */
    readonly loadedOptions: OptionsRegistry;
    /**
     * Get a shallow copy of the beautifiers currently loaded.
     */
    readonly loadedBeautifiers: Beautifier[];
    /**
    Extract the Language-specific option values.
    */
    static getOptionsForLanguage(language: Language, options: LanguageOptionValues): OptionValues;
    /**
    Extract the option values that the Beautifier supports, including applying transformations.
    */
    static getOptionsForBeautifier(beautifier: Beautifier, language: Language, options: OptionValues): OptionValues;
    /**
    Load a Beautifier
    */
    loadBeautifier(beautifier: Beautifier): Unibeautify;
    private validateBeautifier;
    /**
    Load multiple beautifiers.
    */
    loadBeautifiers(beautifiers: Beautifier[]): Unibeautify;
    /**
     * Load a single language
     */
    loadLanguage(language: Language): Unibeautify;
    /**
     * Load multiple languages
     */
    loadLanguages(languages: Language[]): Unibeautify;
    /**
     * Load multiple options
     */
    loadOptions(options: OptionsRegistry): Unibeautify;
}

export interface BeautifierLanguageOptionComplex {
    "align_assignments"?: true | ((align_assignments: boolean) => any) | BeautifierLanguageOption;
    "arrow_parens"?: true | ((arrow_parens: string) => any) | BeautifierLanguageOption;
    "brace_style"?: true | ((brace_style: string) => any) | BeautifierLanguageOption;
    "break_chained_methods"?: true | ((break_chained_methods: boolean) => any) | BeautifierLanguageOption;
    "comma_first"?: true | ((comma_first: boolean) => any) | BeautifierLanguageOption;
    "end_of_line"?: true | ((end_of_line: string) => any) | BeautifierLanguageOption;
    "end_with_comma"?: true | ((end_with_comma: boolean) => any) | BeautifierLanguageOption;
    "end_with_newline"?: true | ((end_with_newline: boolean) => any) | BeautifierLanguageOption;
    "end_with_semicolon"?: true | ((end_with_semicolon: boolean) => any) | BeautifierLanguageOption;
    "force_indentation"?: true | ((force_indentation: boolean) => any) | BeautifierLanguageOption;
    "identifier_case"?: true | ((identifier_case: string) => any) | BeautifierLanguageOption;
    "indent_chained_methods"?: true | ((indent_chained_methods: boolean) => any) | BeautifierLanguageOption;
    "indent_char"?: true | ((indent_char: string) => any) | BeautifierLanguageOption;
    "indent_comments"?: true | ((indent_comments: boolean) => any) | BeautifierLanguageOption;
    "indent_inner_html"?: true | ((indent_inner_html: boolean) => any) | BeautifierLanguageOption;
    "indent_level"?: true | ((indent_level: number) => any) | BeautifierLanguageOption;
    "indent_scripts"?: true | ((indent_scripts: string) => any) | BeautifierLanguageOption;
    "indent_size"?: true | ((indent_size: number) => any) | BeautifierLanguageOption;
    "indent_style"?: true | ((indent_style: string) => any) | BeautifierLanguageOption;
    "indent_with_tabs"?: true | ((indent_with_tabs: boolean) => any) | BeautifierLanguageOption;
    "jslint_happy"?: true | ((jslint_happy: boolean) => any) | BeautifierLanguageOption;
    "jsx_brackets"?: true | ((jsx_brackets: boolean) => any) | BeautifierLanguageOption;
    "keep_array_indentation"?: true | ((keep_array_indentation: boolean) => any) | BeautifierLanguageOption;
    "keyword_case"?: true | ((keyword_case: string) => any) | BeautifierLanguageOption;
    "max_preserve_newlines"?: true | ((max_preserve_newlines: number) => any) | BeautifierLanguageOption;
    "multiline_ternary"?: true | ((multiline_ternary: string) => any) | BeautifierLanguageOption;
    "newline_before_tags"?: true | ((newline_before_tags: any[]) => any) | BeautifierLanguageOption;
    "newline_between_rules"?: true | ((newline_between_rules: boolean) => any) | BeautifierLanguageOption;
    "no_leading_zero"?: true | ((no_leading_zero: boolean) => any) | BeautifierLanguageOption;
    "object_curly_spacing"?: true | ((object_curly_spacing: boolean) => any) | BeautifierLanguageOption;
    "pragma_insert"?: true | ((pragma_insert: boolean) => any) | BeautifierLanguageOption;
    "pragma_require"?: true | ((pragma_require: boolean) => any) | BeautifierLanguageOption;
    "preserve_newlines"?: true | ((preserve_newlines: boolean) => any) | BeautifierLanguageOption;
    "quotes"?: true | ((quotes: string) => any) | BeautifierLanguageOption;
    "remove_trailing_whitespace"?: true | ((remove_trailing_whitespace: boolean) => any) | BeautifierLanguageOption;
    "selector_separator_newline"?: true | ((selector_separator_newline: boolean) => any) | BeautifierLanguageOption;
    "space_after_anon_function"?: true | ((space_after_anon_function: boolean) => any) | BeautifierLanguageOption;
    "space_before_conditional"?: true | ((space_before_conditional: boolean) => any) | BeautifierLanguageOption;
    "space_in_empty_paren"?: true | ((space_in_empty_paren: boolean) => any) | BeautifierLanguageOption;
    "space_in_paren"?: true | ((space_in_paren: boolean) => any) | BeautifierLanguageOption;
    "typesafe_equality_operators"?: true | ((typesafe_equality_operators: boolean) => any) | BeautifierLanguageOption;
    "unescape_strings"?: true | ((unescape_strings: boolean) => any) | BeautifierLanguageOption;
    "unformatted"?: true | ((unformatted: any[]) => any) | BeautifierLanguageOption;
    "unindent_chained_methods"?: true | ((unindent_chained_methods: boolean) => any) | BeautifierLanguageOption;
    "wrap_attributes"?: true | ((wrap_attributes: string) => any) | BeautifierLanguageOption;
    "wrap_attributes_indent_size"?: true | ((wrap_attributes_indent_size: number) => any) | BeautifierLanguageOption;
    "wrap_line_length"?: true | ((wrap_line_length: number) => any) | BeautifierLanguageOption;
    "wrap_prose"?: true | ((wrap_prose: string) => any) | BeautifierLanguageOption;
}
